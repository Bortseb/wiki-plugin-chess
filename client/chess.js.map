{
  "version": 3,
  "sources": ["../node_modules/chess.js/src/chess.ts", "../node_modules/cm-chessboard/src/model/Position.js", "../node_modules/cm-chessboard/src/model/ChessboardState.js", "../node_modules/cm-chessboard/src/lib/Svg.js", "../node_modules/cm-chessboard/src/model/Extension.js", "../node_modules/cm-chessboard/src/lib/Utils.js", "../node_modules/cm-chessboard/src/view/PositionAnimationsQueue.js", "../node_modules/cm-chessboard/src/view/VisualMoveInput.js", "../node_modules/cm-chessboard/src/view/ChessboardView.js", "../node_modules/cm-chessboard/src/Chessboard.js", "../node_modules/cm-chessboard/src/extensions/markers/Markers.js", "../node_modules/cm-chessboard/src/extensions/promotion-dialog/PromotionDialog.js", "../node_modules/cm-chessboard/src/extensions/accessibility/I18n.js", "../node_modules/cm-chessboard/src/extensions/accessibility/Accessibility.js", "../src/client/chess.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright (c) 2025, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nexport const WHITE = 'w'\nexport const BLACK = 'b'\n\nexport const PAWN = 'p'\nexport const KNIGHT = 'n'\nexport const BISHOP = 'b'\nexport const ROOK = 'r'\nexport const QUEEN = 'q'\nexport const KING = 'k'\n\nexport type Color = 'w' | 'b'\nexport type PieceSymbol = 'p' | 'n' | 'b' | 'r' | 'q' | 'k'\n\n// prettier-ignore\nexport type Square =\n    'a8' | 'b8' | 'c8' | 'd8' | 'e8' | 'f8' | 'g8' | 'h8' |\n    'a7' | 'b7' | 'c7' | 'd7' | 'e7' | 'f7' | 'g7' | 'h7' |\n    'a6' | 'b6' | 'c6' | 'd6' | 'e6' | 'f6' | 'g6' | 'h6' |\n    'a5' | 'b5' | 'c5' | 'd5' | 'e5' | 'f5' | 'g5' | 'h5' |\n    'a4' | 'b4' | 'c4' | 'd4' | 'e4' | 'f4' | 'g4' | 'h4' |\n    'a3' | 'b3' | 'c3' | 'd3' | 'e3' | 'f3' | 'g3' | 'h3' |\n    'a2' | 'b2' | 'c2' | 'd2' | 'e2' | 'f2' | 'g2' | 'h2' |\n    'a1' | 'b1' | 'c1' | 'd1' | 'e1' | 'f1' | 'g1' | 'h1'\n\nexport const DEFAULT_POSITION =\n  'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\nexport type Piece = {\n  color: Color\n  type: PieceSymbol\n}\n\ntype InternalMove = {\n  color: Color\n  from: number\n  to: number\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n  flags: number\n}\n\ninterface History {\n  move: InternalMove\n  kings: Record<Color, number>\n  turn: Color\n  castling: Record<Color, number>\n  epSquare: number\n  halfMoves: number\n  moveNumber: number\n}\n\nexport class Move {\n  color: Color\n  from: Square\n  to: Square\n  piece: PieceSymbol\n  captured?: PieceSymbol\n  promotion?: PieceSymbol\n\n  /**\n   * @deprecated This field is deprecated and will be removed in version 2.0.0.\n   * Please use move descriptor functions instead: `isCapture`, `isPromotion`,\n   * `isEnPassant`, `isKingsideCastle`, `isQueensideCastle`, `isCastle`, and\n   * `isBigPawn`\n   */\n  flags: string\n\n  san: string\n  lan: string\n  before: string\n  after: string\n\n  constructor(chess: Chess, internal: InternalMove) {\n    const { color, piece, from, to, flags, captured, promotion } = internal\n\n    const fromAlgebraic = algebraic(from)\n    const toAlgebraic = algebraic(to)\n\n    this.color = color\n    this.piece = piece\n    this.from = fromAlgebraic\n    this.to = toAlgebraic\n\n    /*\n     * HACK: The chess['_method']() calls below invoke private methods in the\n     * Chess class to generate SAN and FEN. It's a bit of a hack, but makes the\n     * code cleaner elsewhere.\n     */\n\n    this.san = chess['_moveToSan'](internal, chess['_moves']({ legal: true }))\n    this.lan = fromAlgebraic + toAlgebraic\n    this.before = chess.fen()\n\n    // Generate the FEN for the 'after' key\n    chess['_makeMove'](internal)\n    this.after = chess.fen()\n    chess['_undoMove']()\n\n    // Build the text representation of the move flags\n    this.flags = ''\n    for (const flag in BITS) {\n      if (BITS[flag] & flags) {\n        this.flags += FLAGS[flag]\n      }\n    }\n\n    if (captured) {\n      this.captured = captured\n    }\n\n    if (promotion) {\n      this.promotion = promotion\n      this.lan += promotion\n    }\n  }\n\n  isCapture() {\n    return this.flags.indexOf(FLAGS['CAPTURE']) > -1\n  }\n\n  isPromotion() {\n    return this.flags.indexOf(FLAGS['PROMOTION']) > -1\n  }\n\n  isEnPassant() {\n    return this.flags.indexOf(FLAGS['EP_CAPTURE']) > -1\n  }\n\n  isKingsideCastle() {\n    return this.flags.indexOf(FLAGS['KSIDE_CASTLE']) > -1\n  }\n\n  isQueensideCastle() {\n    return this.flags.indexOf(FLAGS['QSIDE_CASTLE']) > -1\n  }\n\n  isBigPawn() {\n    return this.flags.indexOf(FLAGS['BIG_PAWN']) > -1\n  }\n}\n\nconst EMPTY = -1\n\nconst FLAGS: Record<string, string> = {\n  NORMAL: 'n',\n  CAPTURE: 'c',\n  BIG_PAWN: 'b',\n  EP_CAPTURE: 'e',\n  PROMOTION: 'p',\n  KSIDE_CASTLE: 'k',\n  QSIDE_CASTLE: 'q',\n}\n\n// prettier-ignore\nexport const SQUARES: Square[] = [\n  'a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8',\n  'a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7',\n  'a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6',\n  'a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5',\n  'a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4',\n  'a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3',\n  'a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2',\n  'a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1'\n]\n\nconst BITS: Record<string, number> = {\n  NORMAL: 1,\n  CAPTURE: 2,\n  BIG_PAWN: 4,\n  EP_CAPTURE: 8,\n  PROMOTION: 16,\n  KSIDE_CASTLE: 32,\n  QSIDE_CASTLE: 64,\n}\n\n/*\n * NOTES ABOUT 0x88 MOVE GENERATION ALGORITHM\n * ----------------------------------------------------------------------------\n * From https://github.com/jhlywa/chess.js/issues/230\n *\n * A lot of people are confused when they first see the internal representation\n * of chess.js. It uses the 0x88 Move Generation Algorithm which internally\n * stores the board as an 8x16 array. This is purely for efficiency but has a\n * couple of interesting benefits:\n *\n * 1. 0x88 offers a very inexpensive \"off the board\" check. Bitwise AND (&) any\n *    square with 0x88, if the result is non-zero then the square is off the\n *    board. For example, assuming a knight square A8 (0 in 0x88 notation),\n *    there are 8 possible directions in which the knight can move. These\n *    directions are relative to the 8x16 board and are stored in the\n *    PIECE_OFFSETS map. One possible move is A8 - 18 (up one square, and two\n *    squares to the left - which is off the board). 0 - 18 = -18 & 0x88 = 0x88\n *    (because of two-complement representation of -18). The non-zero result\n *    means the square is off the board and the move is illegal. Take the\n *    opposite move (from A8 to C7), 0 + 18 = 18 & 0x88 = 0. A result of zero\n *    means the square is on the board.\n *\n * 2. The relative distance (or difference) between two squares on a 8x16 board\n *    is unique and can be used to inexpensively determine if a piece on a\n *    square can attack any other arbitrary square. For example, let's see if a\n *    pawn on E7 can attack E2. The difference between E7 (20) - E2 (100) is\n *    -80. We add 119 to make the ATTACKS array index non-negative (because the\n *    worst case difference is A8 - H1 = -119). The ATTACKS array contains a\n *    bitmask of pieces that can attack from that distance and direction.\n *    ATTACKS[-80 + 119=39] gives us 24 or 0b11000 in binary. Look at the\n *    PIECE_MASKS map to determine the mask for a given piece type. In our pawn\n *    example, we would check to see if 24 & 0x1 is non-zero, which it is\n *    not. So, naturally, a pawn on E7 can't attack a piece on E2. However, a\n *    rook can since 24 & 0x8 is non-zero. The only thing left to check is that\n *    there are no blocking pieces between E7 and E2. That's where the RAYS\n *    array comes in. It provides an offset (in this case 16) to add to E7 (20)\n *    to check for blocking pieces. E7 (20) + 16 = E6 (36) + 16 = E5 (52) etc.\n */\n\n// prettier-ignore\n// eslint-disable-next-line\nconst Ox88: Record<Square, number> = {\n  a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n  a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n  a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n  a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n  a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n  a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n  a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n  a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n}\n\nconst PAWN_OFFSETS = {\n  b: [16, 32, 17, 15],\n  w: [-16, -32, -17, -15],\n}\n\nconst PIECE_OFFSETS = {\n  n: [-18, -33, -31, -14, 18, 33, 31, 14],\n  b: [-17, -15, 17, 15],\n  r: [-16, 1, 16, -1],\n  q: [-17, -16, -15, 1, 17, 16, 15, -1],\n  k: [-17, -16, -15, 1, 17, 16, 15, -1],\n}\n\n// prettier-ignore\nconst ATTACKS = [\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n  24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n   0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n   0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n   0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n   0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n   0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n  20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n];\n\n// prettier-ignore\nconst RAYS = [\n   17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n    0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n    0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n    0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n    0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n    1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n    0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n    0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n    0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n    0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n    0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n  -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n];\n\nconst PIECE_MASKS = { p: 0x1, n: 0x2, b: 0x4, r: 0x8, q: 0x10, k: 0x20 }\n\nconst SYMBOLS = 'pnbrqkPNBRQK'\n\nconst PROMOTIONS: PieceSymbol[] = [KNIGHT, BISHOP, ROOK, QUEEN]\n\nconst RANK_1 = 7\nconst RANK_2 = 6\n/*\n * const RANK_3 = 5\n * const RANK_4 = 4\n * const RANK_5 = 3\n * const RANK_6 = 2\n */\nconst RANK_7 = 1\nconst RANK_8 = 0\n\nconst SIDES = {\n  [KING]: BITS.KSIDE_CASTLE,\n  [QUEEN]: BITS.QSIDE_CASTLE,\n}\n\nconst ROOKS = {\n  w: [\n    { square: Ox88.a1, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h1, flag: BITS.KSIDE_CASTLE },\n  ],\n  b: [\n    { square: Ox88.a8, flag: BITS.QSIDE_CASTLE },\n    { square: Ox88.h8, flag: BITS.KSIDE_CASTLE },\n  ],\n}\n\nconst SECOND_RANK = { b: RANK_7, w: RANK_2 }\n\nconst TERMINATION_MARKERS = ['1-0', '0-1', '1/2-1/2', '*']\n\n// Extracts the zero-based rank of an 0x88 square.\nfunction rank(square: number): number {\n  return square >> 4\n}\n\n// Extracts the zero-based file of an 0x88 square.\nfunction file(square: number): number {\n  return square & 0xf\n}\n\nfunction isDigit(c: string): boolean {\n  return '0123456789'.indexOf(c) !== -1\n}\n\n// Converts a 0x88 square to algebraic notation.\nfunction algebraic(square: number): Square {\n  const f = file(square)\n  const r = rank(square)\n  return ('abcdefgh'.substring(f, f + 1) +\n    '87654321'.substring(r, r + 1)) as Square\n}\n\nfunction swapColor(color: Color): Color {\n  return color === WHITE ? BLACK : WHITE\n}\n\nexport function validateFen(fen: string): { ok: boolean; error?: string } {\n  // 1st criterion: 6 space-seperated fields?\n  const tokens = fen.split(/\\s+/)\n  if (tokens.length !== 6) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: must contain six space-delimited fields',\n    }\n  }\n\n  // 2nd criterion: move number field is a integer value > 0?\n  const moveNumber = parseInt(tokens[5], 10)\n  if (isNaN(moveNumber) || moveNumber <= 0) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: move number must be a positive integer',\n    }\n  }\n\n  // 3rd criterion: half move counter is an integer >= 0?\n  const halfMoves = parseInt(tokens[4], 10)\n  if (isNaN(halfMoves) || halfMoves < 0) {\n    return {\n      ok: false,\n      error:\n        'Invalid FEN: half move counter number must be a non-negative integer',\n    }\n  }\n\n  // 4th criterion: 4th field is a valid e.p.-string?\n  if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n    return { ok: false, error: 'Invalid FEN: en-passant square is invalid' }\n  }\n\n  // 5th criterion: 3th field is a valid castle-string?\n  if (/[^kKqQ-]/.test(tokens[2])) {\n    return { ok: false, error: 'Invalid FEN: castling availability is invalid' }\n  }\n\n  // 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)?\n  if (!/^(w|b)$/.test(tokens[1])) {\n    return { ok: false, error: 'Invalid FEN: side-to-move is invalid' }\n  }\n\n  // 7th criterion: 1st field contains 8 rows?\n  const rows = tokens[0].split('/')\n  if (rows.length !== 8) {\n    return {\n      ok: false,\n      error: \"Invalid FEN: piece data does not contain 8 '/'-delimited rows\",\n    }\n  }\n\n  // 8th criterion: every row is valid?\n  for (let i = 0; i < rows.length; i++) {\n    // check for right sum of fields AND not two numbers in succession\n    let sumFields = 0\n    let previousWasNumber = false\n\n    for (let k = 0; k < rows[i].length; k++) {\n      if (isDigit(rows[i][k])) {\n        if (previousWasNumber) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (consecutive number)',\n          }\n        }\n        sumFields += parseInt(rows[i][k], 10)\n        previousWasNumber = true\n      } else {\n        if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n          return {\n            ok: false,\n            error: 'Invalid FEN: piece data is invalid (invalid piece)',\n          }\n        }\n        sumFields += 1\n        previousWasNumber = false\n      }\n    }\n    if (sumFields !== 8) {\n      return {\n        ok: false,\n        error: 'Invalid FEN: piece data is invalid (too many squares in rank)',\n      }\n    }\n  }\n\n  // 9th criterion: is en-passant square legal?\n  if (\n    (tokens[3][1] == '3' && tokens[1] == 'w') ||\n    (tokens[3][1] == '6' && tokens[1] == 'b')\n  ) {\n    return { ok: false, error: 'Invalid FEN: illegal en-passant square' }\n  }\n\n  // 10th criterion: does chess position contain exact two kings?\n  const kings = [\n    { color: 'white', regex: /K/g },\n    { color: 'black', regex: /k/g },\n  ]\n\n  for (const { color, regex } of kings) {\n    if (!regex.test(tokens[0])) {\n      return { ok: false, error: `Invalid FEN: missing ${color} king` }\n    }\n\n    if ((tokens[0].match(regex) || []).length > 1) {\n      return { ok: false, error: `Invalid FEN: too many ${color} kings` }\n    }\n  }\n\n  // 11th criterion: are any pawns on the first or eighth rows?\n  if (\n    Array.from(rows[0] + rows[7]).some((char) => char.toUpperCase() === 'P')\n  ) {\n    return {\n      ok: false,\n      error: 'Invalid FEN: some pawns are on the edge rows',\n    }\n  }\n\n  return { ok: true }\n}\n\n// this function is used to uniquely identify ambiguous moves\nfunction getDisambiguator(move: InternalMove, moves: InternalMove[]): string {\n  const from = move.from\n  const to = move.to\n  const piece = move.piece\n\n  let ambiguities = 0\n  let sameRank = 0\n  let sameFile = 0\n\n  for (let i = 0, len = moves.length; i < len; i++) {\n    const ambigFrom = moves[i].from\n    const ambigTo = moves[i].to\n    const ambigPiece = moves[i].piece\n\n    /*\n     * if a move of the same piece type ends on the same to square, we'll need\n     * to add a disambiguator to the algebraic notation\n     */\n    if (piece === ambigPiece && from !== ambigFrom && to === ambigTo) {\n      ambiguities++\n\n      if (rank(from) === rank(ambigFrom)) {\n        sameRank++\n      }\n\n      if (file(from) === file(ambigFrom)) {\n        sameFile++\n      }\n    }\n  }\n\n  if (ambiguities > 0) {\n    if (sameRank > 0 && sameFile > 0) {\n      /*\n       * if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      return algebraic(from)\n    } else if (sameFile > 0) {\n      /*\n       * if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      return algebraic(from).charAt(1)\n    } else {\n      // else use the file symbol\n      return algebraic(from).charAt(0)\n    }\n  }\n\n  return ''\n}\n\nfunction addMove(\n  moves: InternalMove[],\n  color: Color,\n  from: number,\n  to: number,\n  piece: PieceSymbol,\n  captured: PieceSymbol | undefined = undefined,\n  flags: number = BITS.NORMAL,\n) {\n  const r = rank(to)\n\n  if (piece === PAWN && (r === RANK_1 || r === RANK_8)) {\n    for (let i = 0; i < PROMOTIONS.length; i++) {\n      const promotion = PROMOTIONS[i]\n      moves.push({\n        color,\n        from,\n        to,\n        piece,\n        captured,\n        promotion,\n        flags: flags | BITS.PROMOTION,\n      })\n    }\n  } else {\n    moves.push({\n      color,\n      from,\n      to,\n      piece,\n      captured,\n      flags,\n    })\n  }\n}\n\nfunction inferPieceType(san: string): PieceSymbol | undefined {\n  let pieceType = san.charAt(0)\n  if (pieceType >= 'a' && pieceType <= 'h') {\n    const matches = san.match(/[a-h]\\d.*[a-h]\\d/)\n    if (matches) {\n      return undefined\n    }\n    return PAWN\n  }\n  pieceType = pieceType.toLowerCase()\n  if (pieceType === 'o') {\n    return KING\n  }\n  return pieceType as PieceSymbol\n}\n\n// parses all of the decorators out of a SAN string\nfunction strippedSan(move: string): string {\n  return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n}\n\nfunction trimFen(fen: string): string {\n  /*\n   * remove last two fields in FEN string as they're not needed when checking\n   * for repetition\n   */\n  return fen.split(' ').slice(0, 4).join(' ')\n}\n\nexport class Chess {\n  private _board = new Array<Piece>(128)\n  private _turn: Color = WHITE\n  private _header: Record<string, string> = {}\n  private _kings: Record<Color, number> = { w: EMPTY, b: EMPTY }\n  private _epSquare = -1\n  private _halfMoves = 0\n  private _moveNumber = 0\n  private _history: History[] = []\n  private _comments: Record<string, string> = {}\n  private _castling: Record<Color, number> = { w: 0, b: 0 }\n\n  // tracks number of times a position has been seen for repetition checking\n  private _positionCount: Record<string, number> = {}\n\n  constructor(fen = DEFAULT_POSITION, { skipValidation = false } = {}) {\n    this.load(fen, { skipValidation })\n  }\n\n  clear({ preserveHeaders = false } = {}) {\n    this._board = new Array<Piece>(128)\n    this._kings = { w: EMPTY, b: EMPTY }\n    this._turn = WHITE\n    this._castling = { w: 0, b: 0 }\n    this._epSquare = EMPTY\n    this._halfMoves = 0\n    this._moveNumber = 1\n    this._history = []\n    this._comments = {}\n    this._header = preserveHeaders ? this._header : {}\n    this._positionCount = {}\n\n    /*\n     * Delete the SetUp and FEN headers (if preserved), the board is empty and\n     * these headers don't make sense in this state. They'll get added later\n     * via .load() or .put()\n     */\n    delete this._header['SetUp']\n    delete this._header['FEN']\n  }\n\n  load(fen: string, { skipValidation = false, preserveHeaders = false } = {}) {\n    let tokens = fen.split(/\\s+/)\n\n    // append commonly omitted fen tokens\n    if (tokens.length >= 2 && tokens.length < 6) {\n      const adjustments = ['-', '-', '0', '1']\n      fen = tokens.concat(adjustments.slice(-(6 - tokens.length))).join(' ')\n    }\n\n    tokens = fen.split(/\\s+/)\n\n    if (!skipValidation) {\n      const { ok, error } = validateFen(fen)\n      if (!ok) {\n        throw new Error(error)\n      }\n    }\n\n    const position = tokens[0]\n    let square = 0\n\n    this.clear({ preserveHeaders })\n\n    for (let i = 0; i < position.length; i++) {\n      const piece = position.charAt(i)\n\n      if (piece === '/') {\n        square += 8\n      } else if (isDigit(piece)) {\n        square += parseInt(piece, 10)\n      } else {\n        const color = piece < 'a' ? WHITE : BLACK\n        this._put(\n          { type: piece.toLowerCase() as PieceSymbol, color },\n          algebraic(square),\n        )\n        square++\n      }\n    }\n\n    this._turn = tokens[1] as Color\n\n    if (tokens[2].indexOf('K') > -1) {\n      this._castling.w |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      this._castling.w |= BITS.QSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      this._castling.b |= BITS.KSIDE_CASTLE\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      this._castling.b |= BITS.QSIDE_CASTLE\n    }\n\n    this._epSquare = tokens[3] === '-' ? EMPTY : Ox88[tokens[3] as Square]\n    this._halfMoves = parseInt(tokens[4], 10)\n    this._moveNumber = parseInt(tokens[5], 10)\n\n    this._updateSetup(fen)\n    this._incPositionCount(fen)\n  }\n\n  fen() {\n    let empty = 0\n    let fen = ''\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i]) {\n        if (empty > 0) {\n          fen += empty\n          empty = 0\n        }\n        const { color, type: piece } = this._board[i]\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n      } else {\n        empty++\n      }\n\n      if ((i + 1) & 0x88) {\n        if (empty > 0) {\n          fen += empty\n        }\n\n        if (i !== Ox88.h1) {\n          fen += '/'\n        }\n\n        empty = 0\n        i += 8\n      }\n    }\n\n    let castling = ''\n    if (this._castling[WHITE] & BITS.KSIDE_CASTLE) {\n      castling += 'K'\n    }\n    if (this._castling[WHITE] & BITS.QSIDE_CASTLE) {\n      castling += 'Q'\n    }\n    if (this._castling[BLACK] & BITS.KSIDE_CASTLE) {\n      castling += 'k'\n    }\n    if (this._castling[BLACK] & BITS.QSIDE_CASTLE) {\n      castling += 'q'\n    }\n\n    // do we have an empty castling flag?\n    castling = castling || '-'\n\n    let epSquare = '-'\n    /*\n     * only print the ep square if en passant is a valid move (pawn is present\n     * and ep capture is not pinned)\n     */\n    if (this._epSquare !== EMPTY) {\n      const bigPawnSquare = this._epSquare + (this._turn === WHITE ? 16 : -16)\n      const squares = [bigPawnSquare + 1, bigPawnSquare - 1]\n\n      for (const square of squares) {\n        // is the square off the board?\n        if (square & 0x88) {\n          continue\n        }\n\n        const color = this._turn\n\n        // is there a pawn that can capture the epSquare?\n        if (\n          this._board[square]?.color === color &&\n          this._board[square]?.type === PAWN\n        ) {\n          // if the pawn makes an ep capture, does it leave it's king in check?\n          this._makeMove({\n            color,\n            from: square,\n            to: this._epSquare,\n            piece: PAWN,\n            captured: PAWN,\n            flags: BITS.EP_CAPTURE,\n          })\n          const isLegal = !this._isKingAttacked(color)\n          this._undoMove()\n\n          // if ep is legal, break and set the ep square in the FEN output\n          if (isLegal) {\n            epSquare = algebraic(this._epSquare)\n            break\n          }\n        }\n      }\n    }\n\n    return [\n      fen,\n      this._turn,\n      castling,\n      epSquare,\n      this._halfMoves,\n      this._moveNumber,\n    ].join(' ')\n  }\n\n  /*\n   * Called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object. If the FEN\n   * is equal to the default position, the SetUp and FEN are deleted the setup\n   * is only updated if history.length is zero, ie moves haven't been made.\n   */\n  private _updateSetup(fen: string) {\n    if (this._history.length > 0) return\n\n    if (fen !== DEFAULT_POSITION) {\n      this._header['SetUp'] = '1'\n      this._header['FEN'] = fen\n    } else {\n      delete this._header['SetUp']\n      delete this._header['FEN']\n    }\n  }\n\n  reset() {\n    this.load(DEFAULT_POSITION)\n  }\n\n  get(square: Square): Piece | undefined {\n    return this._board[Ox88[square]]\n  }\n\n  put(\n    { type, color }: { type: PieceSymbol; color: Color },\n    square: Square,\n  ): boolean {\n    if (this._put({ type, color }, square)) {\n      this._updateCastlingRights()\n      this._updateEnPassantSquare()\n      this._updateSetup(this.fen())\n      return true\n    }\n    return false\n  }\n\n  private _put(\n    { type, color }: { type: PieceSymbol; color: Color },\n    square: Square,\n  ): boolean {\n    // check for piece\n    if (SYMBOLS.indexOf(type.toLowerCase()) === -1) {\n      return false\n    }\n\n    // check for valid square\n    if (!(square in Ox88)) {\n      return false\n    }\n\n    const sq = Ox88[square]\n\n    // don't let the user place more than one king\n    if (\n      type == KING &&\n      !(this._kings[color] == EMPTY || this._kings[color] == sq)\n    ) {\n      return false\n    }\n\n    const currentPieceOnSquare = this._board[sq]\n\n    // if one of the kings will be replaced by the piece from args, set the `_kings` respective entry to `EMPTY`\n    if (currentPieceOnSquare && currentPieceOnSquare.type === KING) {\n      this._kings[currentPieceOnSquare.color] = EMPTY\n    }\n\n    this._board[sq] = { type: type as PieceSymbol, color: color as Color }\n\n    if (type === KING) {\n      this._kings[color] = sq\n    }\n\n    return true\n  }\n\n  remove(square: Square): Piece | undefined {\n    const piece = this.get(square)\n    delete this._board[Ox88[square]]\n    if (piece && piece.type === KING) {\n      this._kings[piece.color] = EMPTY\n    }\n\n    this._updateCastlingRights()\n    this._updateEnPassantSquare()\n    this._updateSetup(this.fen())\n\n    return piece\n  }\n\n  private _updateCastlingRights() {\n    const whiteKingInPlace =\n      this._board[Ox88.e1]?.type === KING &&\n      this._board[Ox88.e1]?.color === WHITE\n    const blackKingInPlace =\n      this._board[Ox88.e8]?.type === KING &&\n      this._board[Ox88.e8]?.color === BLACK\n\n    if (\n      !whiteKingInPlace ||\n      this._board[Ox88.a1]?.type !== ROOK ||\n      this._board[Ox88.a1]?.color !== WHITE\n    ) {\n      this._castling.w &= ~BITS.QSIDE_CASTLE\n    }\n\n    if (\n      !whiteKingInPlace ||\n      this._board[Ox88.h1]?.type !== ROOK ||\n      this._board[Ox88.h1]?.color !== WHITE\n    ) {\n      this._castling.w &= ~BITS.KSIDE_CASTLE\n    }\n\n    if (\n      !blackKingInPlace ||\n      this._board[Ox88.a8]?.type !== ROOK ||\n      this._board[Ox88.a8]?.color !== BLACK\n    ) {\n      this._castling.b &= ~BITS.QSIDE_CASTLE\n    }\n\n    if (\n      !blackKingInPlace ||\n      this._board[Ox88.h8]?.type !== ROOK ||\n      this._board[Ox88.h8]?.color !== BLACK\n    ) {\n      this._castling.b &= ~BITS.KSIDE_CASTLE\n    }\n  }\n\n  private _updateEnPassantSquare() {\n    if (this._epSquare === EMPTY) {\n      return\n    }\n\n    const startSquare = this._epSquare + (this._turn === WHITE ? -16 : 16)\n    const currentSquare = this._epSquare + (this._turn === WHITE ? 16 : -16)\n    const attackers = [currentSquare + 1, currentSquare - 1]\n\n    if (\n      this._board[startSquare] !== null ||\n      this._board[this._epSquare] !== null ||\n      this._board[currentSquare]?.color !== swapColor(this._turn) ||\n      this._board[currentSquare]?.type !== PAWN\n    ) {\n      this._epSquare = EMPTY\n      return\n    }\n\n    const canCapture = (square: number) =>\n      !(square & 0x88) &&\n      this._board[square]?.color === this._turn &&\n      this._board[square]?.type === PAWN\n\n    if (!attackers.some(canCapture)) {\n      this._epSquare = EMPTY\n    }\n  }\n\n  private _attacked(color: Color, square: number): boolean\n  private _attacked(color: Color, square: number, verbose: false): boolean\n  private _attacked(color: Color, square: number, verbose: true): Square[]\n  private _attacked(color: Color, square: number, verbose?: boolean) {\n    const attackers: Square[] = []\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // did we run off the end of the board\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      // if empty square or wrong color\n      if (this._board[i] === undefined || this._board[i].color !== color) {\n        continue\n      }\n\n      const piece = this._board[i]\n      const difference = i - square\n\n      // skip - to/from square are the same\n      if (difference === 0) {\n        continue\n      }\n\n      const index = difference + 119\n\n      if (ATTACKS[index] & PIECE_MASKS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (\n            (difference > 0 && piece.color === WHITE) ||\n            (difference <= 0 && piece.color === BLACK)\n          ) {\n            if (!verbose) {\n              return true\n            } else {\n              attackers.push(algebraic(i))\n            }\n          }\n          continue\n        }\n\n        // if the piece is a knight or a king\n        if (piece.type === 'n' || piece.type === 'k') {\n          if (!verbose) {\n            return true\n          } else {\n            attackers.push(algebraic(i))\n            continue\n          }\n        }\n\n        const offset = RAYS[index]\n        let j = i + offset\n\n        let blocked = false\n        while (j !== square) {\n          if (this._board[j] != null) {\n            blocked = true\n            break\n          }\n          j += offset\n        }\n\n        if (!blocked) {\n          if (!verbose) {\n            return true\n          } else {\n            attackers.push(algebraic(i))\n            continue\n          }\n        }\n      }\n    }\n\n    if (verbose) {\n      return attackers\n    } else {\n      return false\n    }\n  }\n\n  attackers(square: Square, attackedBy?: Color): Square[] {\n    if (!attackedBy) {\n      return this._attacked(this._turn, Ox88[square], true)\n    } else {\n      return this._attacked(attackedBy, Ox88[square], true)\n    }\n  }\n\n  private _isKingAttacked(color: Color): boolean {\n    const square = this._kings[color]\n    return square === -1 ? false : this._attacked(swapColor(color), square)\n  }\n\n  isAttacked(square: Square, attackedBy: Color): boolean {\n    return this._attacked(attackedBy, Ox88[square])\n  }\n\n  isCheck(): boolean {\n    return this._isKingAttacked(this._turn)\n  }\n\n  inCheck(): boolean {\n    return this.isCheck()\n  }\n\n  isCheckmate(): boolean {\n    return this.isCheck() && this._moves().length === 0\n  }\n\n  isStalemate(): boolean {\n    return !this.isCheck() && this._moves().length === 0\n  }\n\n  isInsufficientMaterial(): boolean {\n    /*\n     * k.b. vs k.b. (of opposite colors) with mate in 1:\n     * 8/8/8/8/1b6/8/B1k5/K7 b - - 0 1\n     *\n     * k.b. vs k.n. with mate in 1:\n     * 8/8/8/8/1n6/8/B7/K1k5 b - - 2 1\n     */\n    const pieces: Record<PieceSymbol, number> = {\n      b: 0,\n      n: 0,\n      r: 0,\n      q: 0,\n      k: 0,\n      p: 0,\n    }\n    const bishops = []\n    let numPieces = 0\n    let squareColor = 0\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      squareColor = (squareColor + 1) % 2\n      if (i & 0x88) {\n        i += 7\n        continue\n      }\n\n      const piece = this._board[i]\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n        if (piece.type === BISHOP) {\n          bishops.push(squareColor)\n        }\n        numPieces++\n      }\n    }\n\n    // k vs. k\n    if (numPieces === 2) {\n      return true\n    } else if (\n      // k vs. kn .... or .... k vs. kb\n      numPieces === 3 &&\n      (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n    ) {\n      return true\n    } else if (numPieces === pieces[BISHOP] + 2) {\n      // kb vs. kb where any number of bishops are all on the same color\n      let sum = 0\n      const len = bishops.length\n      for (let i = 0; i < len; i++) {\n        sum += bishops[i]\n      }\n      if (sum === 0 || sum === len) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  isThreefoldRepetition(): boolean {\n    return this._getPositionCount(this.fen()) >= 3\n  }\n\n  isDrawByFiftyMoves(): boolean {\n    return this._halfMoves >= 100 // 50 moves per side = 100 half moves\n  }\n\n  isDraw(): boolean {\n    return (\n      this.isDrawByFiftyMoves() ||\n      this.isStalemate() ||\n      this.isInsufficientMaterial() ||\n      this.isThreefoldRepetition()\n    )\n  }\n\n  isGameOver(): boolean {\n    return this.isCheckmate() || this.isStalemate() || this.isDraw()\n  }\n\n  moves(): string[]\n  moves({ square }: { square: Square }): string[]\n  moves({ piece }: { piece: PieceSymbol }): string[]\n\n  moves({ square, piece }: { square: Square; piece: PieceSymbol }): string[]\n\n  moves({ verbose, square }: { verbose: true; square?: Square }): Move[]\n  moves({ verbose, square }: { verbose: false; square?: Square }): string[]\n  moves({\n    verbose,\n    square,\n  }: {\n    verbose?: boolean\n    square?: Square\n  }): string[] | Move[]\n\n  moves({ verbose, piece }: { verbose: true; piece?: PieceSymbol }): Move[]\n  moves({ verbose, piece }: { verbose: false; piece?: PieceSymbol }): string[]\n  moves({\n    verbose,\n    piece,\n  }: {\n    verbose?: boolean\n    piece?: PieceSymbol\n  }): string[] | Move[]\n\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose: true\n    square?: Square\n    piece?: PieceSymbol\n  }): Move[]\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose: false\n    square?: Square\n    piece?: PieceSymbol\n  }): string[]\n  moves({\n    verbose,\n    square,\n    piece,\n  }: {\n    verbose?: boolean\n    square?: Square\n    piece?: PieceSymbol\n  }): string[] | Move[]\n\n  moves({ square, piece }: { square?: Square; piece?: PieceSymbol }): Move[]\n\n  moves({\n    verbose = false,\n    square = undefined,\n    piece = undefined,\n  }: { verbose?: boolean; square?: Square; piece?: PieceSymbol } = {}) {\n    const moves = this._moves({ square, piece })\n\n    if (verbose) {\n      return moves.map((move) => new Move(this, move))\n    } else {\n      return moves.map((move) => this._moveToSan(move, moves))\n    }\n  }\n\n  private _moves({\n    legal = true,\n    piece = undefined,\n    square = undefined,\n  }: {\n    legal?: boolean\n    piece?: PieceSymbol\n    square?: Square\n  } = {}): InternalMove[] {\n    const forSquare = square ? (square.toLowerCase() as Square) : undefined\n    const forPiece = piece?.toLowerCase()\n\n    const moves: InternalMove[] = []\n    const us = this._turn\n    const them = swapColor(us)\n\n    let firstSquare = Ox88.a8\n    let lastSquare = Ox88.h1\n    let singleSquare = false\n\n    // are we generating moves for a single square?\n    if (forSquare) {\n      // illegal square, return empty moves\n      if (!(forSquare in Ox88)) {\n        return []\n      } else {\n        firstSquare = lastSquare = Ox88[forSquare]\n        singleSquare = true\n      }\n    }\n\n    for (let from = firstSquare; from <= lastSquare; from++) {\n      // did we run off the end of the board\n      if (from & 0x88) {\n        from += 7\n        continue\n      }\n\n      // empty square or opponent, skip\n      if (!this._board[from] || this._board[from].color === them) {\n        continue\n      }\n      const { type } = this._board[from]\n\n      let to: number\n      if (type === PAWN) {\n        if (forPiece && forPiece !== type) continue\n\n        // single square, non-capturing\n        to = from + PAWN_OFFSETS[us][0]\n        if (!this._board[to]) {\n          addMove(moves, us, from, to, PAWN)\n\n          // double square\n          to = from + PAWN_OFFSETS[us][1]\n          if (SECOND_RANK[us] === rank(from) && !this._board[to]) {\n            addMove(moves, us, from, to, PAWN, undefined, BITS.BIG_PAWN)\n          }\n        }\n\n        // pawn captures\n        for (let j = 2; j < 4; j++) {\n          to = from + PAWN_OFFSETS[us][j]\n          if (to & 0x88) continue\n\n          if (this._board[to]?.color === them) {\n            addMove(\n              moves,\n              us,\n              from,\n              to,\n              PAWN,\n              this._board[to].type,\n              BITS.CAPTURE,\n            )\n          } else if (to === this._epSquare) {\n            addMove(moves, us, from, to, PAWN, PAWN, BITS.EP_CAPTURE)\n          }\n        }\n      } else {\n        if (forPiece && forPiece !== type) continue\n\n        for (let j = 0, len = PIECE_OFFSETS[type].length; j < len; j++) {\n          const offset = PIECE_OFFSETS[type][j]\n          to = from\n\n          while (true) {\n            to += offset\n            if (to & 0x88) break\n\n            if (!this._board[to]) {\n              addMove(moves, us, from, to, type)\n            } else {\n              // own color, stop loop\n              if (this._board[to].color === us) break\n\n              addMove(\n                moves,\n                us,\n                from,\n                to,\n                type,\n                this._board[to].type,\n                BITS.CAPTURE,\n              )\n              break\n            }\n\n            /* break, if knight or king */\n            if (type === KNIGHT || type === KING) break\n          }\n        }\n      }\n    }\n\n    /*\n     * check for castling if we're:\n     *   a) generating all moves, or\n     *   b) doing single square move generation on the king's square\n     */\n\n    if (forPiece === undefined || forPiece === KING) {\n      if (!singleSquare || lastSquare === this._kings[us]) {\n        // king-side castling\n        if (this._castling[us] & BITS.KSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom + 2\n\n          if (\n            !this._board[castlingFrom + 1] &&\n            !this._board[castlingTo] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom + 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.KSIDE_CASTLE,\n            )\n          }\n        }\n\n        // queen-side castling\n        if (this._castling[us] & BITS.QSIDE_CASTLE) {\n          const castlingFrom = this._kings[us]\n          const castlingTo = castlingFrom - 2\n\n          if (\n            !this._board[castlingFrom - 1] &&\n            !this._board[castlingFrom - 2] &&\n            !this._board[castlingFrom - 3] &&\n            !this._attacked(them, this._kings[us]) &&\n            !this._attacked(them, castlingFrom - 1) &&\n            !this._attacked(them, castlingTo)\n          ) {\n            addMove(\n              moves,\n              us,\n              this._kings[us],\n              castlingTo,\n              KING,\n              undefined,\n              BITS.QSIDE_CASTLE,\n            )\n          }\n        }\n      }\n    }\n\n    /*\n     * return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal || this._kings[us] === -1) {\n      return moves\n    }\n\n    // filter out illegal moves\n    const legalMoves = []\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(us)) {\n        legalMoves.push(moves[i])\n      }\n      this._undoMove()\n    }\n\n    return legalMoves\n  }\n\n  move(\n    move: string | { from: string; to: string; promotion?: string },\n    { strict = false }: { strict?: boolean } = {},\n  ): Move {\n    /*\n     * The move function can be called with in the following parameters:\n     *\n     * .move('Nxb7')       <- argument is a case-sensitive SAN string\n     *\n     * .move({ from: 'h7', <- argument is a move object\n     *         to :'h8',\n     *         promotion: 'q' })\n     *\n     *\n     * An optional strict argument may be supplied to tell chess.js to\n     * strictly follow the SAN specification.\n     */\n\n    let moveObj = null\n\n    if (typeof move === 'string') {\n      moveObj = this._moveFromSan(move, strict)\n    } else if (typeof move === 'object') {\n      const moves = this._moves()\n\n      // convert the pretty move object to an ugly move object\n      for (let i = 0, len = moves.length; i < len; i++) {\n        if (\n          move.from === algebraic(moves[i].from) &&\n          move.to === algebraic(moves[i].to) &&\n          (!('promotion' in moves[i]) || move.promotion === moves[i].promotion)\n        ) {\n          moveObj = moves[i]\n          break\n        }\n      }\n    }\n\n    // failed to find move\n    if (!moveObj) {\n      if (typeof move === 'string') {\n        throw new Error(`Invalid move: ${move}`)\n      } else {\n        throw new Error(`Invalid move: ${JSON.stringify(move)}`)\n      }\n    }\n\n    /*\n     * need to make a copy of move because we can't generate SAN after the move\n     * is made\n     */\n    const prettyMove = new Move(this, moveObj)\n\n    this._makeMove(moveObj)\n    this._incPositionCount(prettyMove.after)\n    return prettyMove\n  }\n\n  private _push(move: InternalMove) {\n    this._history.push({\n      move,\n      kings: { b: this._kings.b, w: this._kings.w },\n      turn: this._turn,\n      castling: { b: this._castling.b, w: this._castling.w },\n      epSquare: this._epSquare,\n      halfMoves: this._halfMoves,\n      moveNumber: this._moveNumber,\n    })\n  }\n\n  private _makeMove(move: InternalMove) {\n    const us = this._turn\n    const them = swapColor(us)\n    this._push(move)\n\n    this._board[move.to] = this._board[move.from]\n    delete this._board[move.from]\n\n    // if ep capture, remove the captured pawn\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (this._turn === BLACK) {\n        delete this._board[move.to - 16]\n      } else {\n        delete this._board[move.to + 16]\n      }\n    }\n\n    // if pawn promotion, replace with new piece\n    if (move.promotion) {\n      this._board[move.to] = { type: move.promotion, color: us }\n    }\n\n    // if we moved the king\n    if (this._board[move.to].type === KING) {\n      this._kings[us] = move.to\n\n      // if we castled, move the rook next to the king\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        const castlingTo = move.to - 1\n        const castlingFrom = move.to + 1\n        this._board[castlingTo] = this._board[castlingFrom]\n        delete this._board[castlingFrom]\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        const castlingTo = move.to + 1\n        const castlingFrom = move.to - 2\n        this._board[castlingTo] = this._board[castlingFrom]\n        delete this._board[castlingFrom]\n      }\n\n      // turn off castling\n      this._castling[us] = 0\n    }\n\n    // turn off castling if we move a rook\n    if (this._castling[us]) {\n      for (let i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (\n          move.from === ROOKS[us][i].square &&\n          this._castling[us] & ROOKS[us][i].flag\n        ) {\n          this._castling[us] ^= ROOKS[us][i].flag\n          break\n        }\n      }\n    }\n\n    // turn off castling if we capture a rook\n    if (this._castling[them]) {\n      for (let i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (\n          move.to === ROOKS[them][i].square &&\n          this._castling[them] & ROOKS[them][i].flag\n        ) {\n          this._castling[them] ^= ROOKS[them][i].flag\n          break\n        }\n      }\n    }\n\n    // if big pawn move, update the en passant square\n    if (move.flags & BITS.BIG_PAWN) {\n      if (us === BLACK) {\n        this._epSquare = move.to - 16\n      } else {\n        this._epSquare = move.to + 16\n      }\n    } else {\n      this._epSquare = EMPTY\n    }\n\n    // reset the 50 move counter if a pawn is moved or a piece is captured\n    if (move.piece === PAWN) {\n      this._halfMoves = 0\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      this._halfMoves = 0\n    } else {\n      this._halfMoves++\n    }\n\n    if (us === BLACK) {\n      this._moveNumber++\n    }\n\n    this._turn = them\n  }\n\n  undo(): Move | null {\n    const move = this._undoMove()\n    if (move) {\n      const prettyMove = new Move(this, move)\n      this._decPositionCount(prettyMove.after)\n      return prettyMove\n    }\n    return null\n  }\n\n  private _undoMove(): InternalMove | null {\n    const old = this._history.pop()\n    if (old === undefined) {\n      return null\n    }\n\n    const move = old.move\n\n    this._kings = old.kings\n    this._turn = old.turn\n    this._castling = old.castling\n    this._epSquare = old.epSquare\n    this._halfMoves = old.halfMoves\n    this._moveNumber = old.moveNumber\n\n    const us = this._turn\n    const them = swapColor(us)\n\n    this._board[move.from] = this._board[move.to]\n    this._board[move.from].type = move.piece // to undo any promotions\n    delete this._board[move.to]\n\n    if (move.captured) {\n      if (move.flags & BITS.EP_CAPTURE) {\n        // en passant capture\n        let index: number\n        if (us === BLACK) {\n          index = move.to - 16\n        } else {\n          index = move.to + 16\n        }\n        this._board[index] = { type: PAWN, color: them }\n      } else {\n        // regular capture\n        this._board[move.to] = { type: move.captured, color: them }\n      }\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      let castlingTo: number, castlingFrom: number\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castlingTo = move.to + 1\n        castlingFrom = move.to - 1\n      } else {\n        castlingTo = move.to - 2\n        castlingFrom = move.to + 1\n      }\n\n      this._board[castlingTo] = this._board[castlingFrom]\n      delete this._board[castlingFrom]\n    }\n\n    return move\n  }\n\n  pgn({\n    newline = '\\n',\n    maxWidth = 0,\n  }: { newline?: string; maxWidth?: number } = {}): string {\n    /*\n     * using the specification from http://www.chessclub.com/help/PGN-spec\n     * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n     */\n\n    const result: string[] = []\n    let headerExists = false\n\n    /* add the PGN header information */\n    for (const i in this._header) {\n      /*\n       * TODO: order of enumerated properties in header object is not\n       * guaranteed, see ECMA-262 spec (section 12.6.4)\n       */\n      result.push('[' + i + ' \"' + this._header[i] + '\"]' + newline)\n      headerExists = true\n    }\n\n    if (headerExists && this._history.length) {\n      result.push(newline)\n    }\n\n    const appendComment = (moveString: string) => {\n      const comment = this._comments[this.fen()]\n      if (typeof comment !== 'undefined') {\n        const delimiter = moveString.length > 0 ? ' ' : ''\n        moveString = `${moveString}${delimiter}{${comment}}`\n      }\n      return moveString\n    }\n\n    // pop all of history onto reversed_history\n    const reversedHistory = []\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    const moves = []\n    let moveString = ''\n\n    // special case of a commented starting position with no moves\n    if (reversedHistory.length === 0) {\n      moves.push(appendComment(''))\n    }\n\n    // build the list of moves.  a move_string looks like: \"3. e3 e6\"\n    while (reversedHistory.length > 0) {\n      moveString = appendComment(moveString)\n      const move = reversedHistory.pop()\n\n      // make TypeScript stop complaining about move being undefined\n      if (!move) {\n        break\n      }\n\n      // if the position started with black to move, start PGN with #. ...\n      if (!this._history.length && move.color === 'b') {\n        const prefix = `${this._moveNumber}. ...`\n        // is there a comment preceding the first move?\n        moveString = moveString ? `${moveString} ${prefix}` : prefix\n      } else if (move.color === 'w') {\n        // store the previous generated move_string if we have one\n        if (moveString.length) {\n          moves.push(moveString)\n        }\n        moveString = this._moveNumber + '.'\n      }\n\n      moveString =\n        moveString + ' ' + this._moveToSan(move, this._moves({ legal: true }))\n      this._makeMove(move)\n    }\n\n    // are there any other leftover moves?\n    if (moveString.length) {\n      moves.push(appendComment(moveString))\n    }\n\n    // is there a result?\n    if (typeof this._header.Result !== 'undefined') {\n      moves.push(this._header.Result)\n    }\n\n    /*\n     * history should be back to what it was before we started generating PGN,\n     * so join together moves\n     */\n    if (maxWidth === 0) {\n      return result.join('') + moves.join(' ')\n    }\n\n    // TODO (jah): huh?\n    const strip = function () {\n      if (result.length > 0 && result[result.length - 1] === ' ') {\n        result.pop()\n        return true\n      }\n      return false\n    }\n\n    // NB: this does not preserve comment whitespace.\n    const wrapComment = function (width: number, move: string) {\n      for (const token of move.split(' ')) {\n        if (!token) {\n          continue\n        }\n        if (width + token.length > maxWidth) {\n          while (strip()) {\n            width--\n          }\n          result.push(newline)\n          width = 0\n        }\n        result.push(token)\n        width += token.length\n        result.push(' ')\n        width++\n      }\n      if (strip()) {\n        width--\n      }\n      return width\n    }\n\n    // wrap the PGN output at max_width\n    let currentWidth = 0\n    for (let i = 0; i < moves.length; i++) {\n      if (currentWidth + moves[i].length > maxWidth) {\n        if (moves[i].includes('{')) {\n          currentWidth = wrapComment(currentWidth, moves[i])\n          continue\n        }\n      }\n      // if the current move will push past max_width\n      if (currentWidth + moves[i].length > maxWidth && i !== 0) {\n        // don't end the line with whitespace\n        if (result[result.length - 1] === ' ') {\n          result.pop()\n        }\n\n        result.push(newline)\n        currentWidth = 0\n      } else if (i !== 0) {\n        result.push(' ')\n        currentWidth++\n      }\n      result.push(moves[i])\n      currentWidth += moves[i].length\n    }\n\n    return result.join('')\n  }\n\n  /*\n   * @deprecated Use `setHeader` and `getHeaders` instead.\n   */\n  header(...args: string[]): Record<string, string> {\n    for (let i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        this._header[args[i]] = args[i + 1]\n      }\n    }\n    return this._header\n  }\n\n  setHeader(key: string, value: string): Record<string, string> {\n    this._header[key] = value\n    return this._header\n  }\n\n  removeHeader(key: string): boolean {\n    if (key in this._header) {\n      delete this._header[key]\n      return true\n    }\n    return false\n  }\n\n  getHeaders(): Record<string, string> {\n    return this._header\n  }\n\n  loadPgn(\n    pgn: string,\n    {\n      strict = false,\n      newlineChar = '\\r?\\n',\n    }: { strict?: boolean; newlineChar?: string } = {},\n  ) {\n    function mask(str: string): string {\n      return str.replace(/\\\\/g, '\\\\')\n    }\n\n    function parsePgnHeader(header: string): { [key: string]: string } {\n      const headerObj: Record<string, string> = {}\n      const headers = header.split(new RegExp(mask(newlineChar)))\n      let key = ''\n      let value = ''\n\n      for (let i = 0; i < headers.length; i++) {\n        const regex = /^\\s*\\[\\s*([A-Za-z]+)\\s*\"(.*)\"\\s*\\]\\s*$/\n        key = headers[i].replace(regex, '$1')\n        value = headers[i].replace(regex, '$2')\n        if (key.trim().length > 0) {\n          headerObj[key] = value\n        }\n      }\n\n      return headerObj\n    }\n\n    // strip whitespace from head/tail of PGN block\n    pgn = pgn.trim()\n\n    /*\n     * RegExp to split header. Takes advantage of the fact that header and movetext\n     * will always have a blank line between them (ie, two newline_char's). Handles\n     * case where movetext is empty by matching newlineChar until end of string is\n     * matched - effectively trimming from the end extra newlineChar.\n     *\n     * With default newline_char, will equal:\n     * /^(\\[((?:\\r?\\n)|.)*\\])((?:\\s*\\r?\\n){2}|(?:\\s*\\r?\\n)*$)/\n     */\n    const headerRegex = new RegExp(\n      '^(\\\\[((?:' +\n        mask(newlineChar) +\n        ')|.)*\\\\])' +\n        '((?:\\\\s*' +\n        mask(newlineChar) +\n        '){2}|(?:\\\\s*' +\n        mask(newlineChar) +\n        ')*$)',\n    )\n\n    // If no header given, begin with moves.\n    const headerRegexResults = headerRegex.exec(pgn)\n    const headerString = headerRegexResults\n      ? headerRegexResults.length >= 2\n        ? headerRegexResults[1]\n        : ''\n      : ''\n\n    // Put the board in the starting position\n    this.reset()\n\n    // parse PGN header\n    const headers = parsePgnHeader(headerString)\n    let fen = ''\n\n    for (const key in headers) {\n      // check to see user is including fen (possibly with wrong tag case)\n      if (key.toLowerCase() === 'fen') {\n        fen = headers[key]\n      }\n\n      this.header(key, headers[key])\n    }\n\n    /*\n     * the permissive parser should attempt to load a fen tag, even if it's the\n     * wrong case and doesn't include a corresponding [SetUp \"1\"] tag\n     */\n    if (!strict) {\n      if (fen) {\n        this.load(fen, { preserveHeaders: true })\n      }\n    } else {\n      /*\n       * strict parser - load the starting position indicated by [Setup '1']\n       * and [FEN position]\n       */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers)) {\n          throw new Error(\n            'Invalid PGN: FEN tag must be supplied with SetUp tag',\n          )\n        }\n        // don't clear the headers when loading\n        this.load(headers['FEN'], { preserveHeaders: true })\n      }\n    }\n\n    /*\n     * NB: the regexes below that delete move numbers, recursive annotations,\n     * and numeric annotation glyphs may also match text in comments. To\n     * prevent this, we transform comments by hex-encoding them in place and\n     * decoding them again after the other tokens have been deleted.\n     *\n     * While the spec states that PGN files should be ASCII encoded, we use\n     * {en,de}codeURIComponent here to support arbitrary UTF8 as a convenience\n     * for modern users\n     */\n\n    function toHex(s: string): string {\n      return Array.from(s)\n        .map(function (c) {\n          /*\n           * encodeURI doesn't transform most ASCII characters, so we handle\n           * these ourselves\n           */\n          return c.charCodeAt(0) < 128\n            ? c.charCodeAt(0).toString(16)\n            : encodeURIComponent(c).replace(/%/g, '').toLowerCase()\n        })\n        .join('')\n    }\n\n    function fromHex(s: string): string {\n      return s.length == 0\n        ? ''\n        : decodeURIComponent('%' + (s.match(/.{1,2}/g) || []).join('%'))\n    }\n\n    const encodeComment = function (s: string): string {\n      s = s.replace(new RegExp(mask(newlineChar), 'g'), ' ')\n      return `{${toHex(s.slice(1, s.length - 1))}}`\n    }\n\n    const decodeComment = function (s: string) {\n      if (s.startsWith('{') && s.endsWith('}')) {\n        return fromHex(s.slice(1, s.length - 1))\n      }\n    }\n\n    // delete header to get the moves\n    let ms = pgn\n      .replace(headerString, '')\n      .replace(\n        // encode comments so they don't get deleted below\n        new RegExp(`({[^}]*})+?|;([^${mask(newlineChar)}]*)`, 'g'),\n        function (_match, bracket, semicolon) {\n          return bracket !== undefined\n            ? encodeComment(bracket)\n            : ' ' + encodeComment(`{${semicolon.slice(1)}}`)\n        },\n      )\n      .replace(new RegExp(mask(newlineChar), 'g'), ' ')\n\n    // delete recursive annotation variations\n    const ravRegex = /(\\([^()]+\\))+?/g\n    while (ravRegex.test(ms)) {\n      ms = ms.replace(ravRegex, '')\n    }\n\n    // delete move numbers\n    ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n    // delete ... indicating black to move\n    ms = ms.replace(/\\.\\.\\./g, '')\n\n    /* delete numeric annotation glyphs */\n    ms = ms.replace(/\\$\\d+/g, '')\n\n    // trim and get array of moves\n    let moves = ms.trim().split(new RegExp(/\\s+/))\n\n    // delete empty entries\n    moves = moves.filter((move) => move !== '')\n\n    let result = ''\n\n    for (let halfMove = 0; halfMove < moves.length; halfMove++) {\n      const comment = decodeComment(moves[halfMove])\n      if (comment !== undefined) {\n        this._comments[this.fen()] = comment\n        continue\n      }\n\n      const move = this._moveFromSan(moves[halfMove], strict)\n\n      // invalid move\n      if (move == null) {\n        // was the move an end of game marker\n        if (TERMINATION_MARKERS.indexOf(moves[halfMove]) > -1) {\n          result = moves[halfMove]\n        } else {\n          throw new Error(`Invalid move in PGN: ${moves[halfMove]}`)\n        }\n      } else {\n        // reset the end of game marker if making a valid move\n        result = ''\n        this._makeMove(move)\n        this._incPositionCount(this.fen())\n      }\n    }\n\n    /*\n     * Per section 8.2.6 of the PGN spec, the Result tag pair must match match\n     * the termination marker. Only do this when headers are present, but the\n     * result tag is missing\n     */\n\n    if (result && Object.keys(this._header).length && !this._header['Result']) {\n      this.header('Result', result)\n    }\n  }\n\n  /*\n   * Convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} strict Use the strict SAN parser. It will throw errors\n   * on overly disambiguated moves (see below):\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n\n  private _moveToSan(move: InternalMove, moves: InternalMove[]): string {\n    let output = ''\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O'\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O'\n    } else {\n      if (move.piece !== PAWN) {\n        const disambiguator = getDisambiguator(move, moves)\n        output += move.piece.toUpperCase() + disambiguator\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0]\n        }\n        output += 'x'\n      }\n\n      output += algebraic(move.to)\n\n      if (move.promotion) {\n        output += '=' + move.promotion.toUpperCase()\n      }\n    }\n\n    this._makeMove(move)\n    if (this.isCheck()) {\n      if (this.isCheckmate()) {\n        output += '#'\n      } else {\n        output += '+'\n      }\n    }\n    this._undoMove()\n\n    return output\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  private _moveFromSan(move: string, strict = false): InternalMove | null {\n    // strip off any move decorations: e.g Nf3+?! becomes Nf3\n    const cleanMove = strippedSan(move)\n\n    let pieceType = inferPieceType(cleanMove)\n    let moves = this._moves({ legal: true, piece: pieceType })\n\n    // strict parser\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (cleanMove === strippedSan(this._moveToSan(moves[i], moves))) {\n        return moves[i]\n      }\n    }\n\n    // the strict parser failed\n    if (strict) {\n      return null\n    }\n\n    let piece = undefined\n    let matches = undefined\n    let from = undefined\n    let to = undefined\n    let promotion = undefined\n\n    /*\n     * The default permissive (non-strict) parser allows the user to parse\n     * non-standard chess notations. This parser is only run after the strict\n     * Standard Algebraic Notation (SAN) parser has failed.\n     *\n     * When running the permissive parser, we'll run a regex to grab the piece, the\n     * to/from square, and an optional promotion piece. This regex will\n     * parse common non-standard notation like: Pe2-e4, Rc1c4, Qf3xf7,\n     * f7f8q, b1c3\n     *\n     * NOTE: Some positions and moves may be ambiguous when using the permissive\n     * parser. For example, in this position: 6k1/8/8/B7/8/8/8/BN4K1 w - - 0 1,\n     * the move b1c3 may be interpreted as Nc3 or B1c3 (a disambiguated bishop\n     * move). In these cases, the permissive parser will default to the most\n     * basic interpretation (which is b1c3 parsing to Nc3).\n     */\n\n    let overlyDisambiguated = false\n\n    matches = cleanMove.match(\n      /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/,\n      //     piece         from              to       promotion\n    )\n\n    if (matches) {\n      piece = matches[1]\n      from = matches[2] as Square\n      to = matches[3] as Square\n      promotion = matches[4]\n\n      if (from.length == 1) {\n        overlyDisambiguated = true\n      }\n    } else {\n      /*\n       * The [a-h]?[1-8]? portion of the regex below handles moves that may be\n       * overly disambiguated (e.g. Nge7 is unnecessary and non-standard when\n       * there is one legal knight move to e7). In this case, the value of\n       * 'from' variable will be a rank or file, not a square.\n       */\n\n      matches = cleanMove.match(\n        /([pnbrqkPNBRQK])?([a-h]?[1-8]?)x?-?([a-h][1-8])([qrbnQRBN])?/,\n      )\n\n      if (matches) {\n        piece = matches[1]\n        from = matches[2] as Square\n        to = matches[3] as Square\n        promotion = matches[4]\n\n        if (from.length == 1) {\n          overlyDisambiguated = true\n        }\n      }\n    }\n\n    pieceType = inferPieceType(cleanMove)\n    moves = this._moves({\n      legal: true,\n      piece: piece ? (piece as PieceSymbol) : pieceType,\n    })\n\n    if (!to) {\n      return null\n    }\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      if (!from) {\n        // if there is no from square, it could be just 'x' missing from a capture\n        if (\n          cleanMove ===\n          strippedSan(this._moveToSan(moves[i], moves)).replace('x', '')\n        ) {\n          return moves[i]\n        }\n        // hand-compare move properties with the results from our permissive regex\n      } else if (\n        (!piece || piece.toLowerCase() == moves[i].piece) &&\n        Ox88[from] == moves[i].from &&\n        Ox88[to] == moves[i].to &&\n        (!promotion || promotion.toLowerCase() == moves[i].promotion)\n      ) {\n        return moves[i]\n      } else if (overlyDisambiguated) {\n        /*\n         * SPECIAL CASE: we parsed a move string that may have an unneeded\n         * rank/file disambiguator (e.g. Nge7).  The 'from' variable will\n         */\n\n        const square = algebraic(moves[i].from)\n        if (\n          (!piece || piece.toLowerCase() == moves[i].piece) &&\n          Ox88[to] == moves[i].to &&\n          (from == square[0] || from == square[1]) &&\n          (!promotion || promotion.toLowerCase() == moves[i].promotion)\n        ) {\n          return moves[i]\n        }\n      }\n    }\n\n    return null\n  }\n\n  ascii(): string {\n    let s = '   +------------------------+\\n'\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      // display the rank\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |'\n      }\n\n      if (this._board[i]) {\n        const piece = this._board[i].type\n        const color = this._board[i].color\n        const symbol =\n          color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n        s += ' ' + symbol + ' '\n      } else {\n        s += ' . '\n      }\n\n      if ((i + 1) & 0x88) {\n        s += '|\\n'\n        i += 8\n      }\n    }\n    s += '   +------------------------+\\n'\n    s += '     a  b  c  d  e  f  g  h'\n\n    return s\n  }\n\n  perft(depth: number): number {\n    const moves = this._moves({ legal: false })\n    let nodes = 0\n    const color = this._turn\n\n    for (let i = 0, len = moves.length; i < len; i++) {\n      this._makeMove(moves[i])\n      if (!this._isKingAttacked(color)) {\n        if (depth - 1 > 0) {\n          nodes += this.perft(depth - 1)\n        } else {\n          nodes++\n        }\n      }\n      this._undoMove()\n    }\n\n    return nodes\n  }\n\n  turn(): Color {\n    return this._turn\n  }\n\n  board(): ({ square: Square; type: PieceSymbol; color: Color } | null)[][] {\n    const output = []\n    let row = []\n\n    for (let i = Ox88.a8; i <= Ox88.h1; i++) {\n      if (this._board[i] == null) {\n        row.push(null)\n      } else {\n        row.push({\n          square: algebraic(i),\n          type: this._board[i].type,\n          color: this._board[i].color,\n        })\n      }\n      if ((i + 1) & 0x88) {\n        output.push(row)\n        row = []\n        i += 8\n      }\n    }\n\n    return output\n  }\n\n  squareColor(square: Square): 'light' | 'dark' | null {\n    if (square in Ox88) {\n      const sq = Ox88[square]\n      return (rank(sq) + file(sq)) % 2 === 0 ? 'light' : 'dark'\n    }\n\n    return null\n  }\n\n  history(): string[]\n  history({ verbose }: { verbose: true }): Move[]\n  history({ verbose }: { verbose: false }): string[]\n  history({ verbose }: { verbose: boolean }): string[] | Move[]\n  history({ verbose = false }: { verbose?: boolean } = {}) {\n    const reversedHistory = []\n    const moveHistory = []\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n\n      if (verbose) {\n        moveHistory.push(new Move(this, move))\n      } else {\n        moveHistory.push(this._moveToSan(move, this._moves()))\n      }\n      this._makeMove(move)\n    }\n\n    return moveHistory\n  }\n\n  /*\n   * Keeps track of position occurrence counts for the purpose of repetition\n   * checking. All three methods (`_inc`, `_dec`, and `_get`) trim the\n   * irrelevent information from the fen, initialising new positions, and\n   * removing old positions from the record if their counts are reduced to 0.\n   */\n  private _getPositionCount(fen: string): number {\n    const trimmedFen = trimFen(fen)\n    return this._positionCount[trimmedFen] || 0\n  }\n\n  private _incPositionCount(fen: string) {\n    const trimmedFen = trimFen(fen)\n    if (this._positionCount[trimmedFen] === undefined) {\n      this._positionCount[trimmedFen] = 0\n    }\n    this._positionCount[trimmedFen] += 1\n  }\n\n  private _decPositionCount(fen: string) {\n    const trimmedFen = trimFen(fen)\n    if (this._positionCount[trimmedFen] === 1) {\n      delete this._positionCount[trimmedFen]\n    } else {\n      this._positionCount[trimmedFen] -= 1\n    }\n  }\n\n  private _pruneComments() {\n    const reversedHistory = []\n    const currentComments: Record<string, string> = {}\n\n    const copyComment = (fen: string) => {\n      if (fen in this._comments) {\n        currentComments[fen] = this._comments[fen]\n      }\n    }\n\n    while (this._history.length > 0) {\n      reversedHistory.push(this._undoMove())\n    }\n\n    copyComment(this.fen())\n\n    while (true) {\n      const move = reversedHistory.pop()\n      if (!move) {\n        break\n      }\n      this._makeMove(move)\n      copyComment(this.fen())\n    }\n    this._comments = currentComments\n  }\n\n  getComment(): string {\n    return this._comments[this.fen()]\n  }\n\n  setComment(comment: string) {\n    this._comments[this.fen()] = comment.replace('{', '[').replace('}', ']')\n  }\n\n  /**\n   * @deprecated Renamed to `removeComment` for consistency\n   */\n  deleteComment(): string {\n    return this.removeComment()\n  }\n\n  removeComment(): string {\n    const comment = this._comments[this.fen()]\n    delete this._comments[this.fen()]\n    return comment\n  }\n\n  getComments(): { fen: string; comment: string }[] {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen: string) => {\n      return { fen: fen, comment: this._comments[fen] }\n    })\n  }\n\n  /**\n   * @deprecated Renamed to `removeComments` for consistency\n   */\n  deleteComments(): { fen: string; comment: string }[] {\n    return this.removeComments()\n  }\n\n  removeComments(): { fen: string; comment: string }[] {\n    this._pruneComments()\n    return Object.keys(this._comments).map((fen) => {\n      const comment = this._comments[fen]\n      delete this._comments[fen]\n      return { fen: fen, comment: comment }\n    })\n  }\n\n  setCastlingRights(\n    color: Color,\n    rights: Partial<Record<typeof KING | typeof QUEEN, boolean>>,\n  ): boolean {\n    for (const side of [KING, QUEEN] as const) {\n      if (rights[side] !== undefined) {\n        if (rights[side]) {\n          this._castling[color] |= SIDES[side]\n        } else {\n          this._castling[color] &= ~SIDES[side]\n        }\n      }\n    }\n\n    this._updateCastlingRights()\n    const result = this.getCastlingRights(color)\n\n    return (\n      (rights[KING] === undefined || rights[KING] === result[KING]) &&\n      (rights[QUEEN] === undefined || rights[QUEEN] === result[QUEEN])\n    )\n  }\n\n  getCastlingRights(color: Color): { [KING]: boolean; [QUEEN]: boolean } {\n    return {\n      [KING]: (this._castling[color] & SIDES[KING]) !== 0,\n      [QUEEN]: (this._castling[color] & SIDES[QUEEN]) !== 0,\n    }\n  }\n\n  moveNumber(): number {\n    return this._moveNumber\n  }\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nexport const FEN = {\n    start: \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\",\n    empty: \"8/8/8/8/8/8/8/8\"\n}\n\nexport class Position {\n\n    constructor(fen = FEN.empty) {\n        this.squares = new Array(64).fill(null)\n        this.setFen(fen)\n    }\n\n    setFen(fen = FEN.empty) {\n        const parts = fen.replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").split(/\\/|\\s/)\n        for (let part = 0; part < 8; part++) {\n            const row = parts[7 - part].replace(/\\d/g, (str) => {\n                const numSpaces = parseInt(str)\n                let ret = ''\n                for (let i = 0; i < numSpaces; i++) {\n                    ret += '-'\n                }\n                return ret\n            })\n            for (let c = 0; c < 8; c++) {\n                const char = row.substring(c, c + 1)\n                let piece = null\n                if (char !== '-') {\n                    if (char.toUpperCase() === char) {\n                        piece = `w${char.toLowerCase()}`\n                    } else {\n                        piece = `b${char}`\n                    }\n                }\n                this.squares[part * 8 + c] = piece\n            }\n        }\n    }\n\n    getFen() {\n        let parts = new Array(8).fill(\"\")\n        for (let part = 0; part < 8; part++) {\n            let spaceCounter = 0\n            for (let i = 0; i < 8; i++) {\n                const piece = this.squares[part * 8 + i]\n                if (!piece) {\n                    spaceCounter++\n                } else {\n                    if (spaceCounter > 0) {\n                        parts[7 - part] += spaceCounter\n                        spaceCounter = 0\n                    }\n                    const color = piece.substring(0, 1)\n                    const name = piece.substring(1, 2)\n                    if (color === \"w\") {\n                        parts[7 - part] += name.toUpperCase()\n                    } else {\n                        parts[7 - part] += name\n                    }\n                }\n            }\n            if (spaceCounter > 0) {\n                parts[7 - part] += spaceCounter\n                spaceCounter = 0\n            }\n        }\n        return parts.join(\"/\")\n    }\n\n    getPieces(pieceColor = undefined, pieceType = undefined, sortBy = ['k', 'q', 'r', 'b', 'n', 'p']) {\n        const pieces = []\n        const sort = (a, b) => {\n            return sortBy.indexOf(a.name) - sortBy.indexOf(b.name)\n        }\n        for (let i = 0; i < 64; i++) {\n            const piece = this.squares[i]\n            if (piece) {\n                const type = piece.charAt(1)\n                const color = piece.charAt(0)\n                const square = Position.indexToSquare(i)\n                if(pieceType && pieceType !== type || pieceColor && pieceColor !== color) {\n                    continue\n                }\n                pieces.push({\n                    name: type, // deprecated, use type\n                    type: type,\n                    color: color,\n                    position: square, // deprecated, use square\n                    square: square\n                })\n            }\n        }\n        if (sortBy) {\n            pieces.sort(sort)\n        }\n        return pieces\n    }\n\n    movePiece(squareFrom, squareTo) {\n        if (!this.squares[Position.squareToIndex(squareFrom)]) {\n            console.warn(\"no piece on\", squareFrom)\n            return\n        }\n        this.squares[Position.squareToIndex(squareTo)] = this.squares[Position.squareToIndex(squareFrom)]\n        this.squares[Position.squareToIndex(squareFrom)] = null\n    }\n\n    setPiece(square, piece) {\n        this.squares[Position.squareToIndex(square)] = piece\n    }\n\n    getPiece(square) {\n        return this.squares[Position.squareToIndex(square)]\n    }\n\n    static squareToIndex(square) {\n        const coordinates = Position.squareToCoordinates(square)\n        return coordinates[0] + coordinates[1] * 8\n    }\n\n    static indexToSquare(index) {\n        return this.coordinatesToSquare([Math.floor(index % 8), index / 8])\n    }\n\n    static squareToCoordinates(square) {\n        const file = square.charCodeAt(0) - 97\n        const rank = square.charCodeAt(1) - 49\n        return [file, rank]\n    }\n\n    static coordinatesToSquare(coordinates) {\n        const file = String.fromCharCode(coordinates[0] + 97)\n        const rank = String.fromCharCode(coordinates[1] + 49)\n        return file + rank\n    }\n\n    toString() {\n        return this.getFen()\n    }\n\n    clone() {\n        const cloned = new Position()\n        cloned.squares = this.squares.slice(0)\n        return cloned\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {Position} from \"./Position.js\"\n\nexport class ChessboardState {\n\n    constructor() {\n        this.position = new Position()\n        this.orientation = undefined\n        this.inputWhiteEnabled = false\n        this.inputBlackEnabled = false\n        this.squareSelectEnabled = false\n        this.moveInputCallback = null\n        this.extensionPoints = {}\n        this.moveInputProcess = Promise.resolve()\n    }\n\n    inputEnabled() {\n        return this.inputWhiteEnabled || this.inputBlackEnabled\n    }\n\n    invokeExtensionPoints(name, data = {}) {\n        const extensionPoints = this.extensionPoints[name]\n        const dataCloned = Object.assign({}, data)\n        dataCloned.extensionPoint = name\n        let returnValue = true\n        if (extensionPoints) {\n            for (const extensionPoint of extensionPoints) {\n                if(extensionPoint(dataCloned) === false) {\n                    returnValue = false\n                }\n            }\n        }\n        return returnValue\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\"\n\nexport class Svg {\n\n    /**\n     * create the Svg in the HTML DOM\n     * @param containerElement\n     * @returns {Element}\n     */\n    static createSvg(containerElement = undefined) {\n        let svg = document.createElementNS(SVG_NAMESPACE, \"svg\")\n        if (containerElement) {\n            svg.setAttribute(\"width\", \"100%\")\n            svg.setAttribute(\"height\", \"100%\")\n            containerElement.appendChild(svg)\n        }\n        return svg\n    }\n\n    /**\n     * Add an Element to an SVG DOM\n     * @param parent\n     * @param name\n     * @param attributes\n     * @returns {Element}\n     */\n    static addElement(parent, name, attributes = {}) {\n        let element = document.createElementNS(SVG_NAMESPACE, name)\n        if (name === \"use\") {\n            attributes[\"xlink:href\"] = attributes[\"href\"] // fix for safari\n        }\n        for (let attribute in attributes) {\n            if (attributes.hasOwnProperty(attribute)) {\n                if (attribute.indexOf(\":\") !== -1) {\n                    const value = attribute.split(\":\")\n                    element.setAttributeNS(\"http://www.w3.org/1999/\" + value[0], value[1], attributes[attribute])\n                } else {\n                    element.setAttribute(attribute, attributes[attribute])\n                }\n            }\n        }\n        parent.appendChild(element)\n        return element\n    }\n\n    /**\n     * Remove an element from an SVG DOM\n     * @param element\n     */\n    static removeElement(element) {\n        if(!element) {\n            console.warn(\"removeElement, element is\", element)\n            return\n        }\n        if (element.parentNode) {\n            element.parentNode.removeChild(element)\n        } else {\n            console.warn(element, \"without parentNode\")\n        }\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nexport const EXTENSION_POINT = {\n    positionChanged: \"positionChanged\", // the positions of the pieces was changed\n    boardChanged: \"boardChanged\", // the board (orientation) was changed\n    moveInputToggled: \"moveInputToggled\", // move input was enabled or disabled\n    moveInput: \"moveInput\", // move started, moving over a square, validating or canceled\n    beforeRedrawBoard: \"beforeRedrawBoard\", // called before redrawing the board\n    afterRedrawBoard: \"afterRedrawBoard\", // called after redrawing the board\n    redrawBoard: \"redrawBoard\", // called after redrawing the board, DEPRECATED, use afterRedrawBoard 2023-09-18\n    animation: \"animation\", // called on animation start, end, and on every animation frame\n    destroy: \"destroy\" // called, before the board is destroyed\n}\n\nexport class Extension {\n\n    constructor(chessboard) {\n        this.chessboard = chessboard\n    }\n\n    registerExtensionPoint(name, callback) {\n        if(name === EXTENSION_POINT.redrawBoard) { // deprecated 2023-09-18\n            console.warn(\"EXTENSION_POINT.redrawBoard is deprecated, use EXTENSION_POINT.afterRedrawBoard\")\n            name = EXTENSION_POINT.afterRedrawBoard\n        }\n        if (!this.chessboard.state.extensionPoints[name]) {\n            this.chessboard.state.extensionPoints[name] = []\n        }\n        this.chessboard.state.extensionPoints[name].push(callback)\n    }\n\n    /** @deprecated 2023-05-18 */\n    registerMethod(name, callback) {\n        console.warn(\"registerMethod is deprecated, just add methods directly to the chessboard instance\")\n        if (!this.chessboard[name]) {\n            this.chessboard[name] = (...args) => {\n                return callback.apply(this, args)\n            }\n        } else {\n            log.error(\"method\", name, \"already exists\")\n        }\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nexport class Utils {\n\n    static delegate(element, eventName, selector, handler) {\n        const eventListener = function (event) {\n            let target = event.target\n            while (target && target !== this) {\n                if (target.matches(selector)) {\n                    handler.call(target, event)\n                }\n                target = target.parentNode\n            }\n        }\n        element.addEventListener(eventName, eventListener)\n        return {\n            remove: function () {\n                element.removeEventListener(eventName, eventListener)\n            }\n        }\n    }\n\n    static mergeObjects(target, source) {\n        const isObject = (obj) => obj && typeof obj === 'object'\n        if (!isObject(target) || !isObject(source)) {\n            return source\n        }\n        for (const key of Object.keys(source)) {\n            if (source[key] instanceof Object) {\n                Object.assign(source[key], Utils.mergeObjects(target[key], source[key]))\n            }\n        }\n        Object.assign(target || {}, source)\n        return target\n    }\n\n    static createDomElement(html) {\n        const template = document.createElement('template')\n        template.innerHTML = html.trim()\n        return template.content.firstChild\n    }\n\n    static createTask() {\n        let resolve, reject\n        const promise = new Promise(function (_resolve, _reject) {\n            resolve = _resolve\n            reject = _reject\n        })\n        promise.resolve = resolve\n        promise.reject = reject\n        return promise\n    }\n\n    static isAbsoluteUrl(url) {\n        return url.indexOf(\"://\") !== -1 || url.startsWith(\"/\")\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {FEN, Position} from \"../model/Position.js\"\nimport {Svg} from \"../lib/Svg.js\"\nimport {EXTENSION_POINT} from \"../model/Extension.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\n/*\n* Thanks to markosyan for the idea of the PromiseQueue\n* https://medium.com/@karenmarkosyan/how-to-manage-promises-into-dynamic-queue-with-vanilla-javascript-9d0d1f8d4df5\n*/\n\nexport const ANIMATION_EVENT_TYPE = {\n    start: \"start\",\n    frame: \"frame\",\n    end: \"end\"\n}\n\nexport class PromiseQueue {\n\n    constructor() {\n        this.queue = []\n        this.workingOnPromise = false\n        this.stop = false\n    }\n\n    async enqueue(promise) {\n        return new Promise((resolve, reject) => {\n            this.queue.push({\n                promise, resolve, reject,\n            })\n            this.dequeue()\n        })\n    }\n\n    dequeue() {\n        if (this.workingOnPromise) {\n            return\n        }\n        if (this.stop) {\n            this.queue = []\n            this.stop = false\n            return\n        }\n        const entry = this.queue.shift()\n        if (!entry) {\n            return\n        }\n        try {\n            this.workingOnPromise = true\n            entry.promise().then((value) => {\n                this.workingOnPromise = false\n                entry.resolve(value)\n                this.dequeue()\n            }).catch(err => {\n                this.workingOnPromise = false\n                entry.reject(err)\n                this.dequeue()\n            })\n        } catch (err) {\n            this.workingOnPromise = false\n            entry.reject(err)\n            this.dequeue()\n        }\n        return true\n    }\n\n    destroy() {\n        this.stop = true\n    }\n\n}\n\n\nconst CHANGE_TYPE = {\n    move: 0,\n    appear: 1,\n    disappear: 2\n}\n\nexport class PositionsAnimation {\n\n    constructor(view, fromPosition, toPosition, duration, callback) {\n        this.view = view\n        if (fromPosition && toPosition) {\n            this.animatedElements = this.createAnimation(fromPosition.squares, toPosition.squares)\n            this.duration = duration\n            this.callback = callback\n            this.frameHandle = requestAnimationFrame(this.animationStep.bind(this))\n        } else {\n            console.error(\"fromPosition\", fromPosition, \"toPosition\", toPosition)\n        }\n        this.view.positionsAnimationTask = Utils.createTask()\n        this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n            type: ANIMATION_EVENT_TYPE.start\n        })\n    }\n\n    static seekChanges(fromSquares, toSquares) {\n        const appearedList = [], disappearedList = [], changes = []\n        for (let i = 0; i < 64; i++) {\n            const previousSquare = fromSquares[i]\n            const newSquare = toSquares[i]\n            if (newSquare !== previousSquare) {\n                if (newSquare) {\n                    appearedList.push({piece: newSquare, index: i})\n                }\n                if (previousSquare) {\n                    disappearedList.push({piece: previousSquare, index: i})\n                }\n            }\n        }\n        appearedList.forEach((appeared) => {\n            let shortestDistance = 8\n            let foundMoved = null\n            disappearedList.forEach((disappeared) => {\n                if (appeared.piece === disappeared.piece) {\n                    const moveDistance = PositionsAnimation.squareDistance(appeared.index, disappeared.index)\n                    if (moveDistance < shortestDistance) {\n                        foundMoved = disappeared\n                        shortestDistance = moveDistance\n                    }\n                }\n            })\n            if (foundMoved) {\n                disappearedList.splice(disappearedList.indexOf(foundMoved), 1) // remove from disappearedList, because it is moved now\n                changes.push({\n                    type: CHANGE_TYPE.move,\n                    piece: appeared.piece,\n                    atIndex: foundMoved.index,\n                    toIndex: appeared.index\n                })\n            } else {\n                changes.push({type: CHANGE_TYPE.appear, piece: appeared.piece, atIndex: appeared.index})\n            }\n        })\n        disappearedList.forEach((disappeared) => {\n            changes.push({type: CHANGE_TYPE.disappear, piece: disappeared.piece, atIndex: disappeared.index})\n        })\n        return changes\n    }\n\n    createAnimation(fromSquares, toSquares) {\n        const changes = PositionsAnimation.seekChanges(fromSquares, toSquares)\n        const animatedElements = []\n        changes.forEach((change) => {\n            const animatedItem = {\n                type: change.type\n            }\n            switch (change.type) {\n                case CHANGE_TYPE.move:\n                    animatedItem.element = this.view.getPieceElement(Position.indexToSquare(change.atIndex))\n                    animatedItem.element.parentNode.appendChild(animatedItem.element) // move element to top layer\n                    animatedItem.atPoint = this.view.indexToPoint(change.atIndex)\n                    animatedItem.toPoint = this.view.indexToPoint(change.toIndex)\n                    break\n                case CHANGE_TYPE.appear:\n                    animatedItem.element = this.view.drawPieceOnSquare(Position.indexToSquare(change.atIndex), change.piece)\n                    animatedItem.element.style.opacity = 0\n                    break\n                case CHANGE_TYPE.disappear:\n                    animatedItem.element = this.view.getPieceElement(Position.indexToSquare(change.atIndex))\n                    break\n            }\n            animatedElements.push(animatedItem)\n        })\n        return animatedElements\n    }\n\n    animationStep(time) {\n        if(!this.view || !this.view.chessboard.state) { // board was destroyed\n            return\n        }\n        if (!this.startTime) {\n            this.startTime = time\n        }\n        const timeDiff = time - this.startTime\n        if (timeDiff <= this.duration) {\n            this.frameHandle = requestAnimationFrame(this.animationStep.bind(this))\n        } else {\n            cancelAnimationFrame(this.frameHandle)\n            this.animatedElements.forEach((animatedItem) => {\n                if (animatedItem.type === CHANGE_TYPE.disappear) {\n                    Svg.removeElement(animatedItem.element)\n                }\n            })\n            this.view.positionsAnimationTask.resolve()\n            this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n                type: ANIMATION_EVENT_TYPE.end\n            })\n            this.callback()\n            return\n        }\n        const t = Math.min(1, timeDiff / this.duration)\n        let progress = t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t // easeInOut\n        if (isNaN(progress) || progress > 0.99) {\n            progress = 1\n        }\n        this.animatedElements.forEach((animatedItem) => {\n            if (animatedItem.element) {\n                switch (animatedItem.type) {\n                    case CHANGE_TYPE.move:\n                        animatedItem.element.transform.baseVal.removeItem(0)\n                        const transform = (this.view.svg.createSVGTransform())\n                        transform.setTranslate(\n                            animatedItem.atPoint.x + (animatedItem.toPoint.x - animatedItem.atPoint.x) * progress,\n                            animatedItem.atPoint.y + (animatedItem.toPoint.y - animatedItem.atPoint.y) * progress)\n                        animatedItem.element.transform.baseVal.appendItem(transform)\n                        break\n                    case CHANGE_TYPE.appear:\n                        animatedItem.element.style.opacity = Math.round(progress * 100) / 100\n                        break\n                    case CHANGE_TYPE.disappear:\n                        animatedItem.element.style.opacity = Math.round((1 - progress) * 100) / 100\n                        break\n                }\n            } else {\n                console.warn(\"animatedItem has no element\", animatedItem)\n            }\n        })\n        this.view.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.animation, {\n            type: ANIMATION_EVENT_TYPE.frame,\n            progress: progress\n        })\n    }\n\n    static squareDistance(index1, index2) {\n        const file1 = index1 % 8\n        const rank1 = Math.floor(index1 / 8)\n        const file2 = index2 % 8\n        const rank2 = Math.floor(index2 / 8)\n        return Math.max(Math.abs(rank2 - rank1), Math.abs(file2 - file1))\n    }\n\n}\n\nexport class PositionAnimationsQueue extends PromiseQueue {\n\n    constructor(chessboard) {\n        super()\n        this.chessboard = chessboard\n    }\n\n    async enqueuePositionChange(positionFrom, positionTo, animated) {\n        if(positionFrom.getFen() === positionTo.getFen()) {\n            return Promise.resolve()\n        } else {\n            return super.enqueue(() => new Promise((resolve) => {\n                let duration = animated ? this.chessboard.props.style.animationDuration : 0\n                if (this.queue.length > 0) {\n                    duration = duration / (1 + Math.pow(this.queue.length / 5, 2))\n                }\n                new PositionsAnimation(this.chessboard.view,\n                    positionFrom, positionTo, animated ? duration : 0,\n                    () => {\n                        if (this.chessboard.view) { // if destroyed, no view anymore\n                            this.chessboard.view.redrawPieces(positionTo.squares)\n                        }\n                        resolve()\n                    }\n                )\n            }))\n        }\n    }\n\n    async enqueueTurnBoard(position, color, animated) {\n        return super.enqueue(() => new Promise((resolve) => {\n            const emptyPosition = new Position(FEN.empty)\n            let duration = animated ? this.chessboard.props.style.animationDuration : 0\n            if(this.queue.length > 0) {\n                duration = duration / (1 + Math.pow(this.queue.length / 5, 2))\n            }\n            new PositionsAnimation(this.chessboard.view,\n                position, emptyPosition, animated ? duration : 0,\n                () => {\n                    this.chessboard.state.orientation = color\n                    this.chessboard.view.redrawBoard()\n                    this.chessboard.view.redrawPieces(emptyPosition.squares)\n                    new PositionsAnimation(this.chessboard.view,\n                        emptyPosition, position, animated ? duration : 0,\n                        () => {\n                            this.chessboard.view.redrawPieces(position.squares)\n                            resolve()\n                        }\n                    )\n                }\n            )\n        }))\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {Svg} from \"../lib/Svg.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\nconst MOVE_INPUT_STATE = {\n    waitForInputStart: \"waitForInputStart\",\n    pieceClickedThreshold: \"pieceClickedThreshold\",\n    clickTo: \"clickTo\",\n    secondClickThreshold: \"secondClickThreshold\",\n    dragTo: \"dragTo\",\n    clickDragTo: \"clickDragTo\",\n    moveDone: \"moveDone\",\n    reset: \"reset\"\n}\n\nexport const MOVE_CANCELED_REASON = {\n    secondClick: \"secondClick\", // clicked the same piece\n    secondaryClick: \"secondaryClick\", // right click while moving\n    movedOutOfBoard: \"movedOutOfBoard\",\n    draggedBack: \"draggedBack\", // dragged to the start square\n    clickedAnotherPiece: \"clickedAnotherPiece\" // of the same color\n}\n\nconst DRAG_THRESHOLD = 4\n\nexport class VisualMoveInput {\n\n    constructor(view) {\n        this.view = view\n        this.chessboard = view.chessboard\n        this.moveInputState = null\n        this.fromSquare = null\n        this.toSquare = null\n\n        this.setMoveInputState(MOVE_INPUT_STATE.waitForInputStart)\n    }\n\n    moveInputStartedCallback(square) {\n        const result = this.view.moveInputStartedCallback(square)\n        if (result) {\n            this.chessboard.state.moveInputProcess = Utils.createTask()\n            this.chessboard.state.moveInputProcess.then((result) => {\n                if (this.moveInputState === MOVE_INPUT_STATE.waitForInputStart ||\n                    this.moveInputState === MOVE_INPUT_STATE.moveDone) {\n                    this.view.moveInputFinishedCallback(this.fromSquare, this.toSquare, result)\n                }\n            })\n        }\n        return result\n    }\n\n    movingOverSquareCallback(fromSquare, toSquare) {\n        this.view.movingOverSquareCallback(fromSquare, toSquare)\n    }\n\n    validateMoveInputCallback(fromSquare, toSquare) {\n        const result = this.view.validateMoveInputCallback(fromSquare, toSquare)\n        this.chessboard.state.moveInputProcess.resolve(result)\n        return result\n    }\n\n    moveInputCanceledCallback(fromSquare, toSquare, reason) {\n        this.view.moveInputCanceledCallback(fromSquare, toSquare, reason)\n        this.chessboard.state.moveInputProcess.resolve()\n    }\n\n    setMoveInputState(newState, params = undefined) {\n        const prevState = this.moveInputState\n        this.moveInputState = newState\n\n        switch (newState) {\n\n            case MOVE_INPUT_STATE.waitForInputStart:\n                break\n\n            case MOVE_INPUT_STATE.pieceClickedThreshold:\n                if (MOVE_INPUT_STATE.waitForInputStart !== prevState && MOVE_INPUT_STATE.clickTo !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.pointerMoveListener) {\n                    removeEventListener(this.pointerMoveListener.type, this.pointerMoveListener)\n                    this.pointerMoveListener = null\n                }\n                if (this.pointerUpListener) {\n                    removeEventListener(this.pointerUpListener.type, this.pointerUpListener)\n                    this.pointerUpListener = null\n                }\n                this.fromSquare = params.square\n                this.toSquare = null\n                this.movedPiece = params.piece\n                this.startPoint = params.point\n                if (!this.pointerMoveListener && !this.pointerUpListener) {\n                    if (params.type === \"mousedown\") {\n                        this.pointerMoveListener = this.onPointerMove.bind(this)\n                        this.pointerMoveListener.type = \"mousemove\"\n                        addEventListener(\"mousemove\", this.pointerMoveListener)\n                        this.pointerUpListener = this.onPointerUp.bind(this)\n                        this.pointerUpListener.type = \"mouseup\"\n                        addEventListener(\"mouseup\", this.pointerUpListener)\n                    } else if (params.type === \"touchstart\") {\n                        this.pointerMoveListener = this.onPointerMove.bind(this)\n                        this.pointerMoveListener.type = \"touchmove\"\n                        addEventListener(\"touchmove\", this.pointerMoveListener)\n                        this.pointerUpListener = this.onPointerUp.bind(this)\n                        this.pointerUpListener.type = \"touchend\"\n                        addEventListener(\"touchend\", this.pointerUpListener)\n                    } else {\n                        throw Error(\"4b74af\")\n                    }\n                    if (!this.contextMenuListener) {\n                        this.contextMenuListener = this.onContextMenu.bind(this)\n                        this.chessboard.view.svg.addEventListener(\"contextmenu\", this.contextMenuListener)\n                    }\n                } else {\n                    throw Error(\"94ad0c\")\n                }\n                break\n\n            case MOVE_INPUT_STATE.clickTo:\n                if (this.draggablePiece) {\n                    Svg.removeElement(this.draggablePiece)\n                    this.draggablePiece = null\n                }\n                if (prevState === MOVE_INPUT_STATE.dragTo) {\n                    this.view.setPieceVisibility(params.square, true)\n                }\n                break\n\n            case MOVE_INPUT_STATE.secondClickThreshold:\n                if (MOVE_INPUT_STATE.clickTo !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                this.startPoint = params.point\n                break\n\n            case MOVE_INPUT_STATE.dragTo:\n                if (MOVE_INPUT_STATE.pieceClickedThreshold !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.view.setPieceVisibility(params.square, false)\n                    this.createDraggablePiece(params.piece)\n                }\n                break\n\n            case MOVE_INPUT_STATE.clickDragTo:\n                if (MOVE_INPUT_STATE.secondClickThreshold !== prevState) {\n                    throw new Error(\"moveInputState\")\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.view.setPieceVisibility(params.square, false)\n                    this.createDraggablePiece(params.piece)\n                }\n                break\n\n            case MOVE_INPUT_STATE.moveDone:\n                if ([MOVE_INPUT_STATE.dragTo, MOVE_INPUT_STATE.clickTo, MOVE_INPUT_STATE.clickDragTo].indexOf(prevState) === -1) {\n                    throw new Error(\"moveInputState\")\n                }\n                this.toSquare = params.square\n                if (this.toSquare && this.validateMoveInputCallback(this.fromSquare, this.toSquare)) {\n                    this.chessboard.movePiece(this.fromSquare, this.toSquare, prevState === MOVE_INPUT_STATE.clickTo).then(() => {\n                        if (prevState === MOVE_INPUT_STATE.clickTo) {\n                            this.view.setPieceVisibility(this.toSquare, true)\n                        }\n                        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                    })\n                } else {\n                    this.view.setPieceVisibility(this.fromSquare, true)\n                    this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                }\n                break\n\n            case MOVE_INPUT_STATE.reset:\n                if (this.fromSquare && !this.toSquare && this.movedPiece) {\n                    this.chessboard.state.position.setPiece(this.fromSquare, this.movedPiece)\n                }\n                this.fromSquare = null\n                this.toSquare = null\n                this.movedPiece = null\n                if (this.draggablePiece) {\n                    Svg.removeElement(this.draggablePiece)\n                    this.draggablePiece = null\n                }\n                if (this.pointerMoveListener) {\n                    removeEventListener(this.pointerMoveListener.type, this.pointerMoveListener)\n                    this.pointerMoveListener = null\n                }\n                if (this.pointerUpListener) {\n                    removeEventListener(this.pointerUpListener.type, this.pointerUpListener)\n                    this.pointerUpListener = null\n                }\n                if (this.contextMenuListener) {\n                    removeEventListener(\"contextmenu\", this.contextMenuListener)\n                    this.contextMenuListener = null\n                }\n                this.setMoveInputState(MOVE_INPUT_STATE.waitForInputStart)\n                // set temporarily hidden pieces visible again\n                const hiddenPieces = this.view.piecesGroup.querySelectorAll(\"[visibility=hidden]\")\n                for (let i = 0; i < hiddenPieces.length; i++) {\n                    hiddenPieces[i].removeAttribute(\"visibility\")\n                }\n                break\n\n            default:\n                throw Error(`260b09: moveInputState ${newState}`)\n        }\n    }\n\n    createDraggablePiece(pieceName) {\n        // maybe I should use the existing piece from the board and don't create a new one\n        if (this.draggablePiece) {\n            throw Error(\"draggablePiece already exists\")\n        }\n        this.draggablePiece = Svg.createSvg(document.body)\n        this.draggablePiece.classList.add(\"cm-chessboard-draggable-piece\")\n        this.draggablePiece.setAttribute(\"width\", this.view.squareWidth)\n        this.draggablePiece.setAttribute(\"height\", this.view.squareHeight)\n        this.draggablePiece.setAttribute(\"style\", \"pointer-events: none\")\n        this.draggablePiece.name = pieceName\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.view.getSpriteUrl()\n        const piece = Svg.addElement(this.draggablePiece, \"use\", {\n            href: `${spriteUrl}#${pieceName}`\n        })\n        const scaling = this.view.squareHeight / this.chessboard.props.style.pieces.tileSize\n        const transformScale = (this.draggablePiece.createSVGTransform())\n        transformScale.setScale(scaling, scaling)\n        piece.transform.baseVal.appendItem(transformScale)\n    }\n\n    moveDraggablePiece(x, y) {\n        this.draggablePiece.setAttribute(\"style\",\n            `pointer-events: none; position: absolute; left: ${x - (this.view.squareHeight / 2)}px; top: ${y - (this.view.squareHeight / 2)}px`)\n    }\n\n    onPointerDown(e) {\n        if (!(e.type === \"mousedown\" && e.button === 0 || e.type === \"touchstart\")) {\n            return\n        }\n        const square = e.target.getAttribute(\"data-square\")\n        if (!square) { // pointer on square\n            return\n        }\n        const pieceName = this.chessboard.getPiece(square)\n        let color\n        if (pieceName) {\n            color = pieceName ? pieceName.substring(0, 1) : null\n            // allow scrolling, if not pointed on draggable piece\n            if (color === \"w\" && this.chessboard.state.inputWhiteEnabled ||\n                color === \"b\" && this.chessboard.state.inputBlackEnabled) {\n                e.preventDefault()\n            }\n        }\n        if (this.moveInputState !== MOVE_INPUT_STATE.waitForInputStart ||\n            this.chessboard.state.inputWhiteEnabled && color === \"w\" ||\n            this.chessboard.state.inputBlackEnabled && color === \"b\") {\n            let point\n            if (e.type === \"mousedown\") {\n                point = {x: e.clientX, y: e.clientY}\n            } else if (e.type === \"touchstart\") {\n                point = {x: e.touches[0].clientX, y: e.touches[0].clientY}\n            }\n            if (this.moveInputState === MOVE_INPUT_STATE.waitForInputStart && pieceName && this.moveInputStartedCallback(square)) {\n                this.setMoveInputState(MOVE_INPUT_STATE.pieceClickedThreshold, {\n                    square: square,\n                    piece: pieceName,\n                    point: point,\n                    type: e.type\n                })\n            } else if (this.moveInputState === MOVE_INPUT_STATE.clickTo) {\n                if (square === this.fromSquare) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.secondClickThreshold, {\n                        square: square,\n                        piece: pieceName,\n                        point: point,\n                        type: e.type\n                    })\n                } else {\n                    const pieceName = this.chessboard.getPiece(square)\n                    const pieceColor = pieceName ? pieceName.substring(0, 1) : null\n                    const startPieceName = this.chessboard.getPiece(this.fromSquare)\n                    const startPieceColor = startPieceName ? startPieceName.substring(0, 1) : null\n                    if (color && startPieceColor === pieceColor) {\n                        this.moveInputCanceledCallback(this.fromSquare, square, MOVE_CANCELED_REASON.clickedAnotherPiece)\n                        if (this.moveInputStartedCallback(square)) {\n                            this.setMoveInputState(MOVE_INPUT_STATE.pieceClickedThreshold, {\n                                square: square,\n                                piece: pieceName,\n                                point: point,\n                                type: e.type\n                            })\n                        } else {\n                            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                        }\n                    } else {\n                        this.setMoveInputState(MOVE_INPUT_STATE.moveDone, {square: square})\n                    }\n                }\n            }\n        }\n    }\n\n    onPointerMove(e) {\n        let pageX, pageY, clientX, clientY, target\n        if (e.type === \"mousemove\") {\n            clientX = e.clientX\n            clientY = e.clientY\n            pageX = e.pageX\n            pageY = e.pageY\n            target = e.target\n        } else if (e.type === \"touchmove\") {\n            clientX = e.touches[0].clientX\n            clientY = e.touches[0].clientY\n            pageX = e.touches[0].pageX\n            pageY = e.touches[0].pageY\n            target = document.elementFromPoint(clientX, clientY)\n        }\n        if (this.moveInputState === MOVE_INPUT_STATE.pieceClickedThreshold || this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n            if (Math.abs(this.startPoint.x - clientX) > DRAG_THRESHOLD || Math.abs(this.startPoint.y - clientY) > DRAG_THRESHOLD) {\n                if (this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.clickDragTo, {\n                        square: this.fromSquare,\n                        piece: this.movedPiece\n                    })\n                } else {\n                    this.setMoveInputState(MOVE_INPUT_STATE.dragTo, {square: this.fromSquare, piece: this.movedPiece})\n                }\n                if (this.view.chessboard.state.inputEnabled()) {\n                    this.moveDraggablePiece(pageX, pageY)\n                }\n            }\n        } else if (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo || this.moveInputState === MOVE_INPUT_STATE.clickTo) {\n            if (target && target.getAttribute && target.parentElement === this.view.boardGroup) {\n                const square = target.getAttribute(\"data-square\")\n                if (square !== this.fromSquare && square !== this.toSquare) {\n                    this.toSquare = square\n                    this.movingOverSquareCallback(this.fromSquare, this.toSquare)\n                } else if (square === this.fromSquare && this.toSquare !== null) {\n                    this.toSquare = null\n                    this.movingOverSquareCallback(this.fromSquare, null)\n                }\n            } else if (this.toSquare !== null) {\n                this.toSquare = null\n                this.movingOverSquareCallback(this.fromSquare, null)\n            }\n\n            if (this.view.chessboard.state.inputEnabled() && (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo)) {\n                this.moveDraggablePiece(pageX, pageY)\n            }\n        }\n    }\n\n    onPointerUp(e) {\n        let target\n        if (e.type === \"mouseup\") {\n            target = e.target\n        } else if (e.type === \"touchend\") {\n            target = document.elementFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY)\n        }\n        if (target && target.getAttribute) {\n            const square = target.getAttribute(\"data-square\")\n\n            if (square) {\n                if (this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo) {\n                    if (this.fromSquare === square) {\n                        if (this.moveInputState === MOVE_INPUT_STATE.clickDragTo) {\n                            this.chessboard.state.position.setPiece(this.fromSquare, this.movedPiece)\n                            this.view.setPieceVisibility(this.fromSquare)\n                            this.moveInputCanceledCallback(square, null, MOVE_CANCELED_REASON.draggedBack)\n                            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                        } else {\n                            this.setMoveInputState(MOVE_INPUT_STATE.clickTo, {square: square})\n                        }\n                    } else {\n                        this.setMoveInputState(MOVE_INPUT_STATE.moveDone, {square: square})\n                    }\n                } else if (this.moveInputState === MOVE_INPUT_STATE.pieceClickedThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.clickTo, {square: square})\n                } else if (this.moveInputState === MOVE_INPUT_STATE.secondClickThreshold) {\n                    this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                    this.moveInputCanceledCallback(square, null, MOVE_CANCELED_REASON.secondClick)\n                }\n            } else {\n                this.view.redrawPieces()\n                const moveStartSquare = this.fromSquare\n                this.setMoveInputState(MOVE_INPUT_STATE.reset)\n                this.moveInputCanceledCallback(moveStartSquare, null, MOVE_CANCELED_REASON.movedOutOfBoard)\n            }\n        } else {\n            this.view.redrawPieces()\n            this.setMoveInputState(MOVE_INPUT_STATE.reset)\n        }\n    }\n\n    onContextMenu(e) { // while moving\n        e.preventDefault()\n        this.view.redrawPieces()\n        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n        this.moveInputCanceledCallback(this.fromSquare, null, MOVE_CANCELED_REASON.secondaryClick)\n    }\n\n    isDragging() {\n        return this.moveInputState === MOVE_INPUT_STATE.dragTo || this.moveInputState === MOVE_INPUT_STATE.clickDragTo\n    }\n\n    destroy() {\n        this.setMoveInputState(MOVE_INPUT_STATE.reset)\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {VisualMoveInput} from \"./VisualMoveInput.js\"\nimport {Position} from \"../model/Position.js\"\nimport {EXTENSION_POINT} from \"../model/Extension.js\"\nimport {Svg} from \"../lib/Svg.js\"\nimport {Utils} from \"../lib/Utils.js\"\n\nexport const COLOR = {\n    white: \"w\",\n    black: \"b\"\n}\nexport const INPUT_EVENT_TYPE = {\n    moveInputStarted: \"moveInputStarted\",\n    movingOverSquare: \"movingOverSquare\", // while dragging or hover after click\n    validateMoveInput: \"validateMoveInput\",\n    moveInputCanceled: \"moveInputCanceled\",\n    moveInputFinished: \"moveInputFinished\"\n}\nexport const POINTER_EVENTS = {\n    pointercancel: \"pointercancel\",\n    pointerdown: \"pointerdown\",\n    pointerenter: \"pointerenter\",\n    pointerleave: \"pointerleave\",\n    pointermove: \"pointermove\",\n    pointerout: \"pointerout\",\n    pointerover: \"pointerover\",\n    pointerup: \"pointerup\"\n}\nexport const BORDER_TYPE = {\n    none: \"none\", // no border\n    thin: \"thin\", // thin border\n    frame: \"frame\" // wide border with coordinates in it\n}\n\nexport class ChessboardView {\n    constructor(chessboard) {\n        this.chessboard = chessboard\n        this.visualMoveInput = new VisualMoveInput(this)\n        if (chessboard.props.assetsCache) {\n            this.cacheSpriteToDiv(\"cm-chessboard-sprite\", this.getSpriteUrl())\n        }\n        this.container = document.createElement(\"div\")\n        this.chessboard.context.appendChild(this.container)\n        if (chessboard.props.responsive) {\n            if (typeof ResizeObserver !== \"undefined\") {\n                this.resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => { // prevents \"ResizeObserver loop completed with undelivered notifications.\"\n                        this.handleResize()\n                    })\n                })\n                this.resizeObserver.observe(this.chessboard.context)\n            } else {\n                this.resizeListener = this.handleResize.bind(this)\n                window.addEventListener(\"resize\", this.resizeListener)\n            }\n        }\n        this.positionsAnimationTask = Promise.resolve()\n        this.pointerDownListener = this.pointerDownHandler.bind(this)\n        this.container.addEventListener(\"mousedown\", this.pointerDownListener)\n        this.container.addEventListener(\"touchstart\", this.pointerDownListener, {passive: false})\n        this.createSvgAndGroups()\n        this.handleResize()\n    }\n\n    pointerDownHandler(e) {\n        this.visualMoveInput.onPointerDown(e)\n    }\n\n    destroy() {\n        this.visualMoveInput.destroy()\n        if (this.resizeObserver) {\n            this.resizeObserver.unobserve(this.chessboard.context)\n        }\n        if (this.resizeListener) {\n            window.removeEventListener(\"resize\", this.resizeListener)\n        }\n        this.chessboard.context.removeEventListener(\"mousedown\", this.pointerDownListener)\n        this.chessboard.context.removeEventListener(\"touchstart\", this.pointerDownListener)\n        Svg.removeElement(this.svg)\n        this.container.remove()\n    }\n\n    // Sprite //\n\n    cacheSpriteToDiv(wrapperId, url) {\n        if (!document.getElementById(wrapperId)) {\n            const wrapper = document.createElement(\"div\")\n            wrapper.style.transform = \"scale(0)\"\n            wrapper.style.position = \"absolute\"\n            wrapper.setAttribute(\"aria-hidden\", \"true\")\n            wrapper.id = wrapperId\n            document.body.appendChild(wrapper)\n            const xhr = new XMLHttpRequest()\n            xhr.open(\"GET\", url, true)\n            xhr.onload = function () {\n                wrapper.insertAdjacentHTML('afterbegin', xhr.response)\n            }\n            xhr.send()\n        }\n    }\n\n    createSvgAndGroups() {\n        this.svg = Svg.createSvg(this.container)\n        // let description = document.createElement(\"description\")\n        // description.innerText = \"Chessboard\"\n        // description.id = \"svg-description\"\n        // this.svg.appendChild(description)\n        let cssClass = this.chessboard.props.style.cssClass ? this.chessboard.props.style.cssClass : \"default\"\n        this.svg.setAttribute(\"class\", \"cm-chessboard border-type-\" + this.chessboard.props.style.borderType + \" \" + cssClass)\n        // this.svg.setAttribute(\"aria-describedby\", \"svg-description\")\n        this.svg.setAttribute(\"role\", \"img\")\n        this.updateMetrics()\n        this.boardGroup = Svg.addElement(this.svg, \"g\", {class: \"board\"})\n        this.coordinatesGroup = Svg.addElement(this.svg, \"g\", {class: \"coordinates\", \"aria-hidden\": \"true\"})\n        this.markersLayer = Svg.addElement(this.svg, \"g\", {class: \"markers-layer\"})\n        this.piecesLayer = Svg.addElement(this.svg, \"g\", {class: \"pieces-layer\"})\n        this.piecesGroup = Svg.addElement(this.piecesLayer, \"g\", {class: \"pieces\"})\n        this.markersTopLayer = Svg.addElement(this.svg, \"g\", {class: \"markers-top-layer\"})\n        this.interactiveTopLayer = Svg.addElement(this.svg, \"g\", {class: \"interactive-top-layer\"})\n    }\n\n    updateMetrics() {\n        const piecesTileSize = this.chessboard.props.style.pieces.tileSize\n        this.width = this.container.clientWidth\n        this.height = this.container.clientWidth * (this.chessboard.props.style.aspectRatio || 1)\n        if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n            this.borderSize = this.width / 25\n        } else if (this.chessboard.props.style.borderType === BORDER_TYPE.thin) {\n            this.borderSize = this.width / 320\n        } else {\n            this.borderSize = 0\n        }\n        this.innerWidth = this.width - 2 * this.borderSize\n        this.innerHeight = this.height - 2 * this.borderSize\n        this.squareWidth = this.innerWidth / 8\n        this.squareHeight = this.innerHeight / 8\n        this.scalingX = this.squareWidth / piecesTileSize\n        this.scalingY = this.squareHeight / piecesTileSize\n        this.pieceXTranslate = (this.squareWidth / 2 - piecesTileSize * this.scalingY / 2)\n    }\n\n    handleResize() {\n        this.container.style.width = (this.chessboard.context.clientWidth) + \"px\"\n        this.container.style.height = (this.chessboard.context.clientWidth * this.chessboard.props.style.aspectRatio) + \"px\"\n        if (this.container.clientWidth !== this.width || this.container.clientHeight !== this.height) {\n            this.updateMetrics()\n            this.redrawBoard()\n            this.redrawPieces()\n        }\n        this.svg.setAttribute(\"width\", \"100%\")\n        this.svg.setAttribute(\"height\", \"100%\")\n    }\n\n    redrawBoard() {\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.beforeRedrawBoard)\n        this.redrawSquares()\n        this.drawCoordinates()\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.afterRedrawBoard)\n        this.visualizeInputState()\n    }\n\n    // Board //\n\n    redrawSquares() {\n        while (this.boardGroup.firstChild) {\n            this.boardGroup.removeChild(this.boardGroup.lastChild)\n        }\n\n        let boardBorder = Svg.addElement(this.boardGroup, \"rect\", {width: this.width, height: this.height})\n        boardBorder.setAttribute(\"class\", \"border\")\n        if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n            const innerPos = this.borderSize\n            let borderInner = Svg.addElement(this.boardGroup, \"rect\", {\n                x: innerPos, y: innerPos, width: this.width - innerPos * 2, height: this.height - innerPos * 2\n            })\n            borderInner.setAttribute(\"class\", \"border-inner\")\n        }\n\n        for (let i = 0; i < 64; i++) {\n            const index = this.chessboard.state.orientation === COLOR.white ? i : 63 - i\n            const squareColor = ((9 * index) & 8) === 0 ? 'black' : 'white'\n            const fieldClass = `square ${squareColor}`\n            const point = this.squareToPoint(Position.indexToSquare(index))\n            const squareRect = Svg.addElement(this.boardGroup, \"rect\", {\n                x: point.x, y: point.y, width: this.squareWidth, height: this.squareHeight\n            })\n            squareRect.setAttribute(\"class\", fieldClass)\n            squareRect.setAttribute(\"data-square\", Position.indexToSquare(index))\n        }\n    }\n\n    drawCoordinates() {\n        if (!this.chessboard.props.style.showCoordinates) {\n            return\n        }\n        while (this.coordinatesGroup.firstChild) {\n            this.coordinatesGroup.removeChild(this.coordinatesGroup.lastChild)\n        }\n        const inline = this.chessboard.props.style.borderType !== BORDER_TYPE.frame\n        for (let file = 0; file < 8; file++) {\n            let x = this.borderSize + (17 + this.chessboard.props.style.pieces.tileSize * file) * this.scalingX\n            let y = this.height - this.scalingY * 3.5\n            let cssClass = \"coordinate file\"\n            if (inline) {\n                x = x + this.scalingX * 15.5\n                cssClass += file % 2 ? \" white\" : \" black\"\n            }\n            const textElement = Svg.addElement(this.coordinatesGroup, \"text\", {\n                class: cssClass, x: x, y: y, style: `font-size: ${this.scalingY * 10}px`\n            })\n            if (this.chessboard.state.orientation === COLOR.white) {\n                textElement.textContent = String.fromCharCode(97 + file)\n            } else {\n                textElement.textContent = String.fromCharCode(104 - file)\n            }\n        }\n        for (let rank = 0; rank < 8; rank++) {\n            let x = (this.borderSize / 3.7)\n            let y = this.borderSize + 25 * this.scalingY + rank * this.squareHeight\n            let cssClass = \"coordinate rank\"\n            if (inline) {\n                cssClass += rank % 2 ? \" black\" : \" white\"\n                if (this.chessboard.props.style.borderType === BORDER_TYPE.frame) {\n                    x = x + this.scalingX * 10\n                    y = y - this.scalingY * 15\n                } else {\n                    x = x + this.scalingX * 2\n                    y = y - this.scalingY * 15\n                }\n            }\n            const textElement = Svg.addElement(this.coordinatesGroup, \"text\", {\n                class: cssClass, x: x, y: y, style: `font-size: ${this.scalingY * 10}px`\n            })\n            if (this.chessboard.state.orientation === COLOR.white) {\n                textElement.textContent = \"\" + (8 - rank)\n            } else {\n                textElement.textContent = \"\" + (1 + rank)\n            }\n        }\n    }\n\n    // Pieces //\n\n    redrawPieces(squares = this.chessboard.state.position.squares) {\n        const childNodes = Array.from(this.piecesGroup.childNodes)\n        const isDragging = this.visualMoveInput.isDragging()\n        for (let i = 0; i < 64; i++) {\n            const pieceName = squares[i]\n            if (pieceName) {\n                const square = Position.indexToSquare(i)\n                this.drawPieceOnSquare(square, pieceName, isDragging && square === this.visualMoveInput.fromSquare)\n            }\n        }\n        for (const childNode of childNodes) {\n            this.piecesGroup.removeChild(childNode)\n        }\n    }\n\n    drawPiece(parentGroup, pieceName, point) {\n        const pieceGroup = Svg.addElement(parentGroup, \"g\", {})\n        pieceGroup.setAttribute(\"data-piece\", pieceName)\n        const transform = (this.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        pieceGroup.transform.baseVal.appendItem(transform)\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.getSpriteUrl()\n        const pieceUse = Svg.addElement(pieceGroup, \"use\", {\n            href: `${spriteUrl}#${pieceName}`, class: \"piece\"\n        })\n        const transformScale = (this.svg.createSVGTransform())\n        transformScale.setScale(this.scalingY, this.scalingY)\n        pieceUse.transform.baseVal.appendItem(transformScale)\n        return pieceGroup\n    }\n\n    drawPieceOnSquare(square, pieceName, hidden = false) {\n        const pieceGroup = Svg.addElement(this.piecesGroup, \"g\", {})\n        pieceGroup.setAttribute(\"data-piece\", pieceName)\n        pieceGroup.setAttribute(\"data-square\", square)\n        if (hidden) {\n            pieceGroup.setAttribute(\"visibility\", \"hidden\")\n        }\n        const point = this.squareToPoint(square)\n        const transform = (this.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        pieceGroup.transform.baseVal.appendItem(transform)\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.getSpriteUrl()\n        const pieceUse = Svg.addElement(pieceGroup, \"use\", {\n            href: `${spriteUrl}#${pieceName}`, class: \"piece\"\n        })\n        // center on square\n        const transformTranslate = (this.svg.createSVGTransform())\n        transformTranslate.setTranslate(this.pieceXTranslate, 0)\n        pieceUse.transform.baseVal.appendItem(transformTranslate)\n        // scale\n        const transformScale = (this.svg.createSVGTransform())\n        transformScale.setScale(this.scalingY, this.scalingY)\n        pieceUse.transform.baseVal.appendItem(transformScale)\n        return pieceGroup\n    }\n\n    setPieceVisibility(square, visible = true) {\n        const piece = this.getPieceElement(square)\n        if (piece) {\n            if (visible) {\n                piece.setAttribute(\"visibility\", \"visible\")\n            } else {\n                piece.setAttribute(\"visibility\", \"hidden\")\n            }\n        } else {\n            console.warn(\"no piece on\", square)\n        }\n    }\n\n    getPieceElement(square) {\n        if (!square || square.length < 2) {\n            console.warn(\"invalid square\", square)\n            return null\n        }\n        const piece = this.piecesGroup.querySelector(`g[data-square='${square}']`)\n        if (!piece) {\n            console.warn(\"no piece on\", square)\n            return null\n        }\n        return piece\n    }\n\n    // enable and disable move input //\n\n    enableMoveInput(eventHandler, color = null) {\n        if (this.chessboard.state.moveInputCallback) {\n            throw Error(\"moveInput already enabled\")\n        }\n        if (color === COLOR.white) {\n            this.chessboard.state.inputWhiteEnabled = true\n        } else if (color === COLOR.black) {\n            this.chessboard.state.inputBlackEnabled = true\n        } else {\n            this.chessboard.state.inputWhiteEnabled = true\n            this.chessboard.state.inputBlackEnabled = true\n        }\n        this.chessboard.state.moveInputCallback = eventHandler\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInputToggled, {enabled: true, color: color})\n        this.visualizeInputState()\n    }\n\n    disableMoveInput() {\n        this.chessboard.state.inputWhiteEnabled = false\n        this.chessboard.state.inputBlackEnabled = false\n        this.chessboard.state.moveInputCallback = null\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInputToggled, {enabled: false})\n        this.visualizeInputState()\n    }\n\n    // callbacks //\n\n    moveInputStartedCallback(square) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputStarted,\n            square: square, /** square is deprecated, use squareFrom (2023-05-22) */\n            squareFrom: square,\n            piece: this.chessboard.getPiece(square)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n        return data.moveInputCallbackResult\n    }\n\n    movingOverSquareCallback(squareFrom, squareTo) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.movingOverSquare,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            piece: this.chessboard.getPiece(squareFrom)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    validateMoveInputCallback(squareFrom, squareTo) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.validateMoveInput,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            piece: this.chessboard.getPiece(squareFrom)\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            data.moveInputCallbackResult = this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n        return data.moveInputCallbackResult\n    }\n\n    moveInputCanceledCallback(squareFrom, squareTo, reason) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputCanceled,\n            reason: reason,\n            squareFrom: squareFrom,\n            squareTo: squareTo\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    moveInputFinishedCallback(squareFrom, squareTo, legalMove) {\n        const data = {\n            chessboard: this.chessboard,\n            type: INPUT_EVENT_TYPE.moveInputFinished,\n            squareFrom: squareFrom,\n            squareTo: squareTo,\n            legalMove: legalMove\n        }\n        if (this.chessboard.state.moveInputCallback) {\n            this.chessboard.state.moveInputCallback(data)\n        }\n        this.chessboard.state.invokeExtensionPoints(EXTENSION_POINT.moveInput, data)\n    }\n\n    // Helpers //\n\n    visualizeInputState() {\n        if (this.chessboard.state) { // fix https://github.com/shaack/cm-chessboard/issues/47\n            if (this.chessboard.state.inputWhiteEnabled || this.chessboard.state.inputBlackEnabled) {\n                this.boardGroup.setAttribute(\"class\", \"board input-enabled\")\n            } else {\n                this.boardGroup.setAttribute(\"class\", \"board\")\n            }\n        }\n    }\n\n    indexToPoint(index) {\n        let x, y\n        if (this.chessboard.state.orientation === COLOR.white) {\n            x = this.borderSize + (index % 8) * this.squareWidth\n            y = this.borderSize + (7 - Math.floor(index / 8)) * this.squareHeight\n        } else {\n            x = this.borderSize + (7 - index % 8) * this.squareWidth\n            y = this.borderSize + (Math.floor(index / 8)) * this.squareHeight\n        }\n        return {x: x, y: y}\n    }\n\n    squareToPoint(square) {\n        const index = Position.squareToIndex(square)\n        return this.indexToPoint(index)\n    }\n\n    getSpriteUrl() {\n        if (Utils.isAbsoluteUrl(this.chessboard.props.style.pieces.file)) {\n            return this.chessboard.props.style.pieces.file\n        } else {\n            return this.chessboard.props.assetsUrl + this.chessboard.props.style.pieces.file\n        }\n    }\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nimport {ChessboardState} from \"./model/ChessboardState.js\"\nimport {FEN, Position} from \"./model/Position.js\"\nimport {PositionAnimationsQueue} from \"./view/PositionAnimationsQueue.js\"\nimport {EXTENSION_POINT} from \"./model/Extension.js\"\nimport {ChessboardView, COLOR, INPUT_EVENT_TYPE, BORDER_TYPE, POINTER_EVENTS} from \"./view/ChessboardView.js\"\nimport {Utils} from \"./lib/Utils.js\"\n\nexport const PIECE = {\n    wp: \"wp\", wb: \"wb\", wn: \"wn\", wr: \"wr\", wq: \"wq\", wk: \"wk\",\n    bp: \"bp\", bb: \"bb\", bn: \"bn\", br: \"br\", bq: \"bq\", bk: \"bk\"\n}\nexport const PIECE_TYPE = {\n    pawn: \"p\", knight: \"n\", bishop: \"b\", rook: \"r\", queen: \"q\", king: \"k\"\n}\nexport const PIECES_FILE_TYPE = {\n    svgSprite: \"svgSprite\"\n}\nexport {COLOR}\nexport {INPUT_EVENT_TYPE}\nexport {POINTER_EVENTS}\nexport {BORDER_TYPE}\nexport {FEN}\n\nexport class Chessboard {\n\n    constructor(context, props = {}) {\n        if (!context) {\n            throw new Error(\"container element is \" + context)\n        }\n        this.context = context\n        this.id = (Math.random() + 1).toString(36).substring(2, 8)\n        this.extensions = []\n        this.props = {\n            position: FEN.empty, // set position as fen, use FEN.start or FEN.empty as shortcuts\n            orientation: COLOR.white, // white on bottom\n            responsive: true, // resize the board automatically to the size of the context element\n            assetsUrl: \"./assets/\", // put all css and sprites in this folder, will be ignored for absolute urls of assets files\n            assetsCache: true, // cache the sprites, deactivate if you want to use multiple pieces sets in one page\n            style: {\n                cssClass: \"default\", // set the css theme of the board, try \"green\", \"blue\" or \"chess-club\"\n                showCoordinates: true, // show ranks and files\n                borderType: BORDER_TYPE.none, // \"thin\" thin border, \"frame\" wide border with coordinates in it, \"none\" no border\n                aspectRatio: 1, // height/width of the board\n                pieces: {\n                    type: PIECES_FILE_TYPE.svgSprite, // pieces are in an SVG sprite, no other type supported for now\n                    file: \"pieces/standard.svg\", // the filename of the sprite in `assets/pieces/` or an absolute url like `https://\u2026` or `/\u2026`\n                    tileSize: 40 // the tile size in the sprite\n                },\n                animationDuration: 300 // pieces animation duration in milliseconds. Disable all animations with `0`\n            },\n            extensions: [ /* {class: ExtensionClass, props: { ... }} */] // add extensions here\n        }\n        Utils.mergeObjects(this.props, props)\n        this.state = new ChessboardState()\n        this.view = new ChessboardView(this)\n        this.positionAnimationsQueue = new PositionAnimationsQueue(this)\n        this.state.orientation = this.props.orientation\n        // instantiate extensions\n        for (const extensionData of this.props.extensions) {\n            this.addExtension(extensionData.class, extensionData.props)\n        }\n        this.view.redrawBoard()\n        this.state.position = new Position(this.props.position)\n        this.view.redrawPieces()\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        this.initialized = Promise.resolve() // deprecated 2023-09-19 don't use this anymore\n    }\n\n    // API //\n\n    async setPiece(square, piece, animated = false) {\n        const positionFrom = this.state.position.clone()\n        this.state.position.setPiece(square, piece)\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async movePiece(squareFrom, squareTo, animated = false) {\n        const positionFrom = this.state.position.clone()\n        this.state.position.movePiece(squareFrom, squareTo)\n        this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async setPosition(fen, animated = false) {\n        const positionFrom = this.state.position.clone()\n        const positionTo = new Position(fen)\n        if (positionFrom.getFen() !== positionTo.getFen()) {\n            this.state.position.setFen(fen)\n            this.state.invokeExtensionPoints(EXTENSION_POINT.positionChanged)\n        }\n        return this.positionAnimationsQueue.enqueuePositionChange(positionFrom, this.state.position.clone(), animated)\n    }\n\n    async setOrientation(color, animated = false) {\n        const position = this.state.position.clone()\n        if (this.boardTurning) {\n            console.warn(\"setOrientation is only once in queue allowed\")\n            return\n        }\n        this.boardTurning = true\n        return this.positionAnimationsQueue.enqueueTurnBoard(position, color, animated).then(() => {\n            this.boardTurning = false\n            this.state.invokeExtensionPoints(EXTENSION_POINT.boardChanged)\n        })\n    }\n\n    getPiece(square) {\n        return this.state.position.getPiece(square)\n    }\n\n    getPosition() {\n        return this.state.position.getFen()\n    }\n\n    getOrientation() {\n        return this.state.orientation\n    }\n\n    enableMoveInput(eventHandler, color = undefined) {\n        this.view.enableMoveInput(eventHandler, color)\n    }\n\n    disableMoveInput() {\n        this.view.disableMoveInput()\n    }\n\n    isMoveInputEnabled() {\n        return this.state.inputWhiteEnabled || this.state.inputBlackEnabled\n    }\n\n    enableSquareSelect(eventType = POINTER_EVENTS.pointerdown, eventHandler) {\n        if (!this.squareSelectListener) {\n            this.squareSelectListener = function (e) {\n                const square = e.target.getAttribute(\"data-square\")\n                eventHandler({\n                    eventType: e.type,\n                    event: e,\n                    chessboard: this,\n                    square: square\n                })\n            }\n        }\n        this.context.addEventListener(eventType, this.squareSelectListener)\n        this.state.squareSelectEnabled = true\n        this.view.visualizeInputState()\n    }\n\n    disableSquareSelect(eventType) {\n        this.context.removeEventListener(eventType, this.squareSelectListener)\n        this.squareSelectListener = undefined\n        this.state.squareSelectEnabled = false\n        this.view.visualizeInputState()\n    }\n\n    isSquareSelectEnabled() {\n        return this.state.squareSelectEnabled\n    }\n\n    addExtension(extensionClass, props) {\n        if (this.getExtension(extensionClass)) {\n            throw Error(\"extension \\\"\" + extensionClass.name + \"\\\" already added\")\n        }\n        this.extensions.push(new extensionClass(this, props))\n    }\n\n    getExtension(extensionClass) {\n        for (const extension of this.extensions) {\n            if (extension instanceof extensionClass) {\n                return extension\n            }\n        }\n        return null\n    }\n\n    destroy() {\n        this.state.invokeExtensionPoints(EXTENSION_POINT.destroy)\n        this.positionAnimationsQueue.destroy()\n        this.view.destroy()\n        this.view = undefined\n        this.state = undefined\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {Extension, EXTENSION_POINT} from \"../../model/Extension.js\"\nimport {Svg} from \"../../lib/Svg.js\"\nimport {INPUT_EVENT_TYPE} from \"../../Chessboard.js\"\nimport {Utils} from \"../../lib/Utils.js\"\n\nexport const MARKER_TYPE = {\n    frame: {class: \"marker-frame\", slice: \"markerFrame\"},\n    framePrimary: {class: \"marker-frame-primary\", slice: \"markerFrame\"},\n    frameDanger: {class: \"marker-frame-danger\", slice: \"markerFrame\"},\n    circle: {class: \"marker-circle\", slice: \"markerCircle\"},\n    circlePrimary: {class: \"marker-circle-primary\", slice: \"markerCircle\"},\n    circleDanger: {class: \"marker-circle-danger\", slice: \"markerCircle\"},\n    square: {class: \"marker-square\", slice: \"markerSquare\"},\n    dot: {class: \"marker-dot\", slice: \"markerDot\", position: 'above'},\n    bevel: {class: \"marker-bevel\", slice: \"markerBevel\"}\n}\n\nexport class Markers extends Extension {\n\n    /** @constructor */\n    constructor(chessboard, props = {}) {\n        super(chessboard)\n        this.registerExtensionPoint(EXTENSION_POINT.afterRedrawBoard, () => {\n            this.onRedrawBoard()\n        })\n        this.props = {\n            autoMarkers: MARKER_TYPE.frame, // set to `null` to disable autoMarkers\n            sprite: \"extensions/markers/markers.svg\" // the sprite file of the markers\n        }\n        Object.assign(this.props, props)\n        if (chessboard.props.assetsCache) {\n            chessboard.view.cacheSpriteToDiv(\"cm-chessboard-markers\", this.getSpriteUrl())\n        }\n        chessboard.addMarker = this.addMarker.bind(this)\n        chessboard.getMarkers = this.getMarkers.bind(this)\n        chessboard.removeMarkers = this.removeMarkers.bind(this)\n        chessboard.addLegalMovesMarkers = this.addLegalMovesMarkers.bind(this)\n        chessboard.removeLegalMovesMarkers = this.removeLegalMovesMarkers.bind(this)\n        this.markerGroupDown = Svg.addElement(chessboard.view.markersLayer, \"g\", {class: \"markers\"})\n        this.markerGroupUp = Svg.addElement(chessboard.view.markersTopLayer, \"g\", {class: \"markers\"})\n        this.markers = []\n        if (this.props.autoMarkers) {\n            Object.assign(this.props.autoMarkers, this.props.autoMarkers)\n            this.registerExtensionPoint(EXTENSION_POINT.moveInput, (event) => {\n                this.drawAutoMarkers(event)\n            })\n        }\n    }\n\n    drawAutoMarkers(event) {\n        if(event.type !== INPUT_EVENT_TYPE.moveInputFinished) {\n            this.removeMarkers(this.props.autoMarkers)\n        }\n        if (event.type === INPUT_EVENT_TYPE.moveInputStarted &&\n            !event.moveInputCallbackResult) {\n            return\n        }\n        if (event.type === INPUT_EVENT_TYPE.moveInputStarted ||\n            event.type === INPUT_EVENT_TYPE.movingOverSquare) {\n            if (event.squareFrom) {\n                this.addMarker(this.props.autoMarkers, event.squareFrom)\n            }\n            if (event.squareTo) {\n                this.addMarker(this.props.autoMarkers, event.squareTo)\n            }\n        }\n    }\n\n    onRedrawBoard() {\n        while (this.markerGroupUp.firstChild) {\n            this.markerGroupUp.removeChild(this.markerGroupUp.firstChild)\n        }\n        while (this.markerGroupDown.firstChild) {\n            this.markerGroupDown.removeChild(this.markerGroupDown.firstChild)\n        }\n        this.markers.forEach((marker) => {\n                this.drawMarker(marker)\n            }\n        )\n    }\n\n    addLegalMovesMarkers(moves) {\n        for (const move of moves) {\n            if (move.promotion && move.promotion !== \"q\") {\n                continue\n            }\n            if (this.chessboard.getPiece(move.to)) {\n                this.chessboard.addMarker(MARKER_TYPE.bevel, move.to)\n            } else {\n                this.chessboard.addMarker(MARKER_TYPE.dot, move.to)\n            }\n        }\n    }\n\n    removeLegalMovesMarkers() {\n        this.chessboard.removeMarkers(MARKER_TYPE.bevel)\n        this.chessboard.removeMarkers(MARKER_TYPE.dot)\n    }\n\n    drawMarker(marker) {\n        let markerGroup\n        if (marker.type.position === 'above') {\n            markerGroup = Svg.addElement(this.markerGroupUp, \"g\")\n        } else {\n            markerGroup = Svg.addElement(this.markerGroupDown, \"g\")\n        }\n        markerGroup.setAttribute(\"data-square\", marker.square)\n        const point = this.chessboard.view.squareToPoint(marker.square)\n        const transform = (this.chessboard.view.svg.createSVGTransform())\n        transform.setTranslate(point.x, point.y)\n        markerGroup.transform.baseVal.appendItem(transform)\n        const spriteUrl = this.chessboard.props.assetsCache ? \"\" : this.getSpriteUrl()\n        const markerUse = Svg.addElement(markerGroup, \"use\",\n            {href: `${spriteUrl}#${marker.type.slice}`, class: \"marker \" + marker.type.class})\n        const transformScale = (this.chessboard.view.svg.createSVGTransform())\n        transformScale.setScale(this.chessboard.view.scalingX, this.chessboard.view.scalingY)\n        markerUse.transform.baseVal.appendItem(transformScale)\n        return markerGroup\n    }\n\n    addMarker(type, square) {\n        if (typeof type === \"string\" || typeof square === \"object\") { // todo remove 2022-12-01\n            console.error(\"changed the signature of `addMarker` to `(type, square)` with v5.1.x\")\n            return\n        }\n        this.markers.push(new Marker(square, type))\n        this.onRedrawBoard()\n    }\n\n    getMarkers(type = undefined, square = undefined) {\n        if (typeof type === \"string\" || typeof square === \"object\") { // todo remove 2022-12-01\n            console.error(\"changed the signature of `getMarkers` to `(type, square)` with v5.1.x\")\n            return\n        }\n        let markersFound = []\n        this.markers.forEach((marker) => {\n            if (marker.matches(square, type)) {\n                markersFound.push(marker)\n            }\n        })\n        return markersFound\n    }\n\n    removeMarkers(type = undefined, square = undefined) {\n        if (typeof type === \"string\" || typeof square === \"object\") { // todo remove 2022-12-01\n            console.error(\"changed the signature of `removeMarkers` to `(type, square)` with v5.1.x\")\n            return\n        }\n        this.markers = this.markers.filter((marker) => !marker.matches(square, type))\n        this.onRedrawBoard()\n    }\n\n    getSpriteUrl() {\n        if(Utils.isAbsoluteUrl(this.props.sprite)) {\n            return this.props.sprite\n        } else {\n            return this.chessboard.props.assetsUrl + this.props.sprite\n        }\n    }\n}\n\nclass Marker {\n    constructor(square, type) {\n        this.square = square\n        this.type = type\n    }\n\n    matches(square = undefined, type = undefined) {\n        if (!type && !square) {\n            return true\n        } else if (!type) {\n            if (square === this.square) {\n                return true\n            }\n        } else if (!square) {\n            if (this.type === type) {\n                return true\n            }\n        } else if (this.type === type && square === this.square) {\n            return true\n        }\n        return false\n    }\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {Extension, EXTENSION_POINT} from \"../../model/Extension.js\"\nimport {COLOR, PIECE} from \"../../Chessboard.js\"\nimport {Svg} from \"../../lib/Svg.js\"\nimport {Utils} from \"../../lib/Utils.js\"\n\nconst DISPLAY_STATE = {\n    hidden: \"hidden\",\n    displayRequested: \"displayRequested\",\n    shown: \"shown\"\n}\n\nexport const PROMOTION_DIALOG_RESULT_TYPE = {\n    pieceSelected: \"pieceSelected\",\n    canceled: \"canceled\"\n}\n\nexport class PromotionDialog extends Extension {\n\n    /** @constructor */\n    constructor(chessboard) {\n        super(chessboard)\n        this.registerExtensionPoint(EXTENSION_POINT.afterRedrawBoard, this.extensionPointRedrawBoard.bind(this))\n        chessboard.showPromotionDialog = this.showPromotionDialog.bind(this)\n        chessboard.isPromotionDialogShown = this.isPromotionDialogShown.bind(this)\n        this.promotionDialogGroup = Svg.addElement(chessboard.view.interactiveTopLayer, \"g\", {class: \"promotion-dialog-group\"})\n        this.state = {\n            displayState: DISPLAY_STATE.hidden,\n            callback: null,\n            dialogParams: {\n                square: null,\n                color: null\n            }\n        }\n    }\n\n    // public (chessboard.showPromotionDialog)\n    showPromotionDialog(square, color, callback) {\n        this.state.dialogParams.square = square\n        this.state.dialogParams.color = color\n        this.state.callback = callback\n        this.setDisplayState(DISPLAY_STATE.displayRequested)\n        setTimeout(() => {\n                this.chessboard.view.positionsAnimationTask.then(() => {\n                    this.setDisplayState(DISPLAY_STATE.shown)\n                })\n            }\n        )\n    }\n\n    // public (chessboard.isPromotionDialogShown)\n    isPromotionDialogShown() {\n        return this.state.displayState === DISPLAY_STATE.shown ||\n            this.state.displayState === DISPLAY_STATE.displayRequested\n    }\n\n    // private\n    extensionPointRedrawBoard() {\n        this.redrawDialog()\n    }\n\n    drawPieceButton(piece, point) {\n        const squareWidth = this.chessboard.view.squareWidth\n        const squareHeight = this.chessboard.view.squareHeight\n        Svg.addElement(this.promotionDialogGroup,\n            \"rect\", {\n                x: point.x, y: point.y, width: squareWidth, height: squareHeight,\n                class: \"promotion-dialog-button\",\n                \"data-piece\": piece\n            })\n        this.chessboard.view.drawPiece(this.promotionDialogGroup, piece, point)\n    }\n\n    redrawDialog() {\n        while (this.promotionDialogGroup.firstChild) {\n            this.promotionDialogGroup.removeChild(this.promotionDialogGroup.firstChild)\n        }\n        if (this.state.displayState === DISPLAY_STATE.shown) {\n            const squareWidth = this.chessboard.view.squareWidth\n            const squareHeight = this.chessboard.view.squareHeight\n            const squareCenterPoint = this.chessboard.view.squareToPoint(this.state.dialogParams.square)\n            squareCenterPoint.x = squareCenterPoint.x + squareWidth / 2\n            squareCenterPoint.y = squareCenterPoint.y + squareHeight / 2\n            let turned = false\n            const rank = parseInt(this.state.dialogParams.square.charAt(1), 10)\n            if (this.chessboard.getOrientation() === COLOR.white && rank < 5 ||\n                this.chessboard.getOrientation() === COLOR.black && rank >= 5) {\n                turned = true\n            }\n            const offsetY = turned ? -4 * squareHeight : 0\n            const offsetX = squareCenterPoint.x + squareWidth > this.chessboard.view.width ? -squareWidth : 0\n            Svg.addElement(this.promotionDialogGroup,\n                \"rect\", {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y + offsetY,\n                    width: squareWidth,\n                    height: squareHeight * 4,\n                    class: \"promotion-dialog\"\n                })\n            const dialogParams = this.state.dialogParams\n            if (turned) {\n                this.drawPieceButton(PIECE[dialogParams.color + \"q\"], {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y - squareHeight\n                })\n                this.drawPieceButton(PIECE[dialogParams.color + \"r\"], {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y - squareHeight * 2\n                })\n                this.drawPieceButton(PIECE[dialogParams.color + \"b\"], {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y - squareHeight * 3\n                })\n                this.drawPieceButton(PIECE[dialogParams.color + \"n\"], {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y - squareHeight * 4\n                })\n            } else {\n                this.drawPieceButton(PIECE[dialogParams.color + \"q\"], {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y\n                })\n                this.drawPieceButton(PIECE[dialogParams.color + \"r\"], {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y + squareHeight\n                })\n                this.drawPieceButton(PIECE[dialogParams.color + \"b\"], {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y + squareHeight * 2\n                })\n                this.drawPieceButton(PIECE[dialogParams.color + \"n\"], {\n                    x: squareCenterPoint.x + offsetX,\n                    y: squareCenterPoint.y + squareHeight * 3\n                })\n            }\n        }\n    }\n\n    promotionDialogOnClickPiece(event) {\n        if (event.button !== 2) {\n            if (event.target.dataset.piece) {\n                if(this.state.callback) {\n                    this.state.callback({\n                        type: PROMOTION_DIALOG_RESULT_TYPE.pieceSelected,\n                        square: this.state.dialogParams.square,\n                        piece: event.target.dataset.piece\n                    })\n                }\n                this.setDisplayState(DISPLAY_STATE.hidden)\n            } else {\n                this.promotionDialogOnCancel(event)\n            }\n        }\n    }\n\n    promotionDialogOnCancel(event) {\n        if (this.state.displayState === DISPLAY_STATE.shown) {\n            event.preventDefault()\n            this.setDisplayState(DISPLAY_STATE.hidden)\n            if(this.state.callback) {\n                this.state.callback({type: PROMOTION_DIALOG_RESULT_TYPE.canceled})\n            }\n        }\n    }\n\n    contextMenu(event) {\n        event.preventDefault()\n        this.setDisplayState(DISPLAY_STATE.hidden)\n        if(this.state.callback) {\n            this.state.callback({type: PROMOTION_DIALOG_RESULT_TYPE.canceled})\n        }\n    }\n\n    setDisplayState(displayState) {\n        this.state.displayState = displayState\n        if (displayState === DISPLAY_STATE.shown) {\n            this.clickDelegate = Utils.delegate(this.chessboard.view.svg,\n                \"pointerdown\",\n                \"*\",\n                this.promotionDialogOnClickPiece.bind(this))\n            this.contextMenuListener = this.contextMenu.bind(this)\n            this.chessboard.view.svg.addEventListener(\"contextmenu\", this.contextMenuListener)\n        } else if (displayState === DISPLAY_STATE.hidden) {\n            this.clickDelegate.remove()\n            this.chessboard.view.svg.removeEventListener(\"contextmenu\", this.contextMenuListener)\n        }\n        this.redrawDialog()\n    }\n\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\n\nexport const piecesTranslations = {\n    en: {\n        colors: {\n            w: \"w\", b: \"b\"\n        },\n        colors_long: {\n            w: \"White\", b: \"Black\"\n        },\n        pieces: {\n            p: \"p\", n: \"n\", b: \"b\", r: \"r\", q: \"q\", k: \"k\"\n        },\n        pieces_long: {\n            p: \"Pawn\", n: \"Knight\", b: \"Bishop\", r: \"Rook\", q: \"Queen\", k: \"King\"\n        }\n    },\n    de: {\n        colors: {\n            w: \"w\", b: \"s\"\n        },\n        colors_long: {\n            w: \"Wei\u00DF\", b: \"Schwarz\"\n        },\n        pieces: {\n            p: \"b\", n: \"s\", b: \"l\", r: \"t\", q: \"d\", k: \"k\"\n        },\n        pieces_long: {\n            p: \"Bauer\", n: \"Springer\", b: \"L\u00E4ufer\", r: \"Turm\", q: \"Dame\", k: \"K\u00F6nig\"\n        }\n    }\n}\n\nexport function renderPieceTitle(lang, name, color = undefined) {\n    let title = piecesTranslations[lang].pieces_long[name]\n    if (color) {\n        title += \" \" + piecesTranslations[lang].colors_long[color]\n    }\n    return title\n}\n", "/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-chessboard\n * License: MIT, see file 'LICENSE'\n */\nimport {Extension, EXTENSION_POINT} from \"../../model/Extension.js\"\nimport {COLOR, INPUT_EVENT_TYPE} from \"../../Chessboard.js\"\nimport {piecesTranslations, renderPieceTitle} from \"./I18n.js\"\nimport {Utils} from \"../../lib/Utils.js\"\n\nconst translations = {\n    de: {\n        chessboard: \"Schachbrett\",\n        pieces_lists: \"Figurenlisten\",\n        board_as_table: \"Schachbrett als Tabelle\",\n        move_piece: \"Figur bewegen\",\n        from: \"Zug von\",\n        to: \"Zug nach\",\n        move: \"Zug ausf\u00FChren\",\n        input_white_enabled: \"Eingabe Wei\u00DF aktiviert\",\n        input_black_enabled: \"Eingabe Schwarz aktiviert\",\n        input_disabled: \"Eingabe deaktiviert\",\n        pieces: \"Figuren\",\n    },\n    en: {\n        chessboard: \"Chessboard\",\n        pieces_lists: \"Pieces lists\",\n        board_as_table: \"Chessboard as table\",\n        move_piece: \"Move piece\",\n        from: \"Move from\",\n        to: \"Move to\",\n        move: \"Make move\",\n        input_white_enabled: \"Input white enabled\",\n        input_black_enabled: \"Input black enabled\",\n        input_disabled: \"Input disabled\",\n        pieces: \"Pieces\"\n    }\n}\n\nexport class Accessibility extends Extension {\n    constructor(chessboard, props) {\n        super(chessboard)\n        this.props = {\n            language: navigator.language.substring(0, 2).toLowerCase(), // supports \"de\" and \"en\" for now, used for pieces naming\n            brailleNotationInAlt: true, // show the braille notation of the position in the alt attribute of the SVG image\n            movePieceForm: true, // display a form to move a piece (from, to, move)\n            boardAsTable: true, // display the board additionally as HTML table\n            piecesAsList: true, // display the pieces additionally as List\n            visuallyHidden: true // hide all those extra outputs visually but keep them accessible for screen readers and braille displays\n        }\n        Object.assign(this.props, props)\n        if (this.props.language !== \"de\" && this.props.language !== \"en\") {\n            this.props.language = \"en\"\n        }\n        this.lang = this.props.language\n        this.tPieces = piecesTranslations[this.lang]\n        this.t = translations[this.lang]\n        this.components = []\n        if(this.props.movePieceForm || this.props.boardAsTable || this.props.piecesAsList) {\n            const container = document.createElement(\"div\")\n            container.classList.add(\"cm-chessboard-accessibility\")\n            this.chessboard.context.appendChild(container)\n            if(this.props.visuallyHidden) {\n                container.classList.add(\"visually-hidden\")\n            }\n            if (this.props.movePieceForm) {\n                this.components.push(new MovePieceForm(container, this))\n            }\n            if (this.props.boardAsTable) {\n                this.components.push(new BoardAsTable(container, this))\n            }\n            if (this.props.piecesAsList) {\n                this.components.push(new PiecesAsList(container, this))\n            }\n        }\n        if (this.props.brailleNotationInAlt) {\n            this.components.push(new BrailleNotationInAlt(this))\n        }\n    }\n}\n\nclass BrailleNotationInAlt {\n    constructor(extension) {\n        this.extension = extension\n        extension.registerExtensionPoint(EXTENSION_POINT.positionChanged, () => {\n            this.redraw()\n        })\n    }\n\n    redraw() {\n        const pieces = this.extension.chessboard.state.position.getPieces()\n        let listW = piecesTranslations[this.extension.lang].colors.w.toUpperCase() + \":\"\n        let listB = piecesTranslations[this.extension.lang].colors.b.toUpperCase() + \":\"\n        for (const piece of pieces) {\n            const pieceName = piece.type === \"p\" ? \"\" : piecesTranslations[this.extension.lang].pieces[piece.type].toUpperCase()\n            if (piece.color === \"w\") {\n                listW += \" \" + pieceName + piece.position\n            } else {\n                listB += \" \" + pieceName + piece.position\n            }\n        }\n        const altText = `${listW}\n${listB}`\n        this.extension.chessboard.view.svg.setAttribute(\"alt\", altText)\n    }\n}\n\nclass MovePieceForm {\n    constructor(container, extension) {\n        this.chessboard = extension.chessboard\n        this.movePieceFormContainer = Utils.createDomElement(`\n<div>\n    <h3 id=\"hl_form_${this.chessboard.id}\">${extension.t.move_piece}</h3>\n    <form aria-labelledby=\"hl_form_${this.chessboard.id}\">\n        <label for=\"move_piece_input_from_${this.chessboard.id}\">${extension.t.from}</label>\n        <input class=\"input-from\" type=\"text\" size=\"2\" id=\"move_piece_input_from_${this.chessboard.id}\"/>\n        <label for=\"move_piece_input_to_${this.chessboard.id}\">${extension.t.to}</label>\n        <input class=\"input-to\" type=\"text\" size=\"2\" id=\"move_piece_input_to_${this.chessboard.id}\"/>\n        <button type=\"submit\" class=\"button-move\">${extension.t.move}</button>\n    </form>\n</div>`)\n        this.form = this.movePieceFormContainer.querySelector(\"form\")\n        this.inputFrom = this.form.querySelector(\".input-from\")\n        this.inputTo = this.form.querySelector(\".input-to\")\n        this.moveButton = this.form.querySelector(\".button-move\")\n        this.form.addEventListener(\"submit\", (evt) => {\n            evt.preventDefault()\n            if (this.chessboard.state.moveInputCallback({\n                chessboard: this.chessboard,\n                type: INPUT_EVENT_TYPE.validateMoveInput,\n                squareFrom: this.inputFrom.value,\n                squareTo: this.inputTo.value\n            })) {\n                this.chessboard.movePiece(this.inputFrom.value, this.inputTo.value,\n                    true).then(() => {\n                    this.inputFrom.value = \"\"\n                    this.inputTo.value = \"\"\n                })\n            }\n        })\n        container.appendChild(this.movePieceFormContainer)\n        extension.registerExtensionPoint(EXTENSION_POINT.moveInputToggled, () => {\n            this.redraw()\n        })\n    }\n\n    redraw() {\n        if (this.inputFrom) {\n            if (this.chessboard.state.inputWhiteEnabled || this.chessboard.state.inputBlackEnabled) {\n                this.inputFrom.disabled = false\n                this.inputTo.disabled = false\n                this.moveButton.disabled = false\n            } else {\n                this.inputFrom.disabled = true\n                this.inputTo.disabled = true\n                this.moveButton.disabled = true\n            }\n        }\n    }\n}\n\nclass BoardAsTable {\n    constructor(container, extension) {\n        this.extension = extension\n        this.chessboard = extension.chessboard\n        this.boardAsTableContainer = Utils.createDomElement(`<div><h3 id=\"hl_table_${this.chessboard.id}\">${extension.t.board_as_table}</h3><div class=\"table\"></div></div>`)\n        this.boardAsTable = this.boardAsTableContainer.querySelector(\".table\")\n        container.appendChild(this.boardAsTableContainer)\n        extension.registerExtensionPoint(EXTENSION_POINT.positionChanged, () => {\n            this.redraw()\n        })\n        extension.registerExtensionPoint(EXTENSION_POINT.boardChanged, () => {\n            this.redraw()\n        })\n    }\n\n    redraw() {\n        const squares = this.chessboard.state.position.squares.slice()\n        const ranks = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n        const files = [\"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"]\n        if (this.chessboard.state.orientation === COLOR.black) {\n            ranks.reverse()\n            files.reverse()\n            squares.reverse()\n        }\n        let html = `<table aria-labelledby=\"hl_table_${this.chessboard.id}\"><tr><th></th>`\n        for (const rank of ranks) {\n            html += `<th scope='col'>${rank}</th>`\n        }\n        html += \"</tr>\"\n        for (let x = 7; x >= 0; x--) {\n            html += `<tr><th scope=\"row\">${files[7 - x]}</th>`\n            for (let y = 0; y < 8; y++) {\n                const pieceCode = squares[y % 8 + x * 8]\n                let color, name\n                if (pieceCode) {\n                    color = pieceCode.charAt(0)\n                    name = pieceCode.charAt(1)\n                    html += `<td>${renderPieceTitle(this.extension.lang, name, color)}</td>`\n                } else {\n                    html += `<td></td>`\n                }\n            }\n            html += \"</tr>\"\n        }\n        html += \"</table>\"\n        this.boardAsTable.innerHTML = html\n    }\n}\n\nclass PiecesAsList {\n    constructor(container, extension) {\n        this.extension = extension\n        this.chessboard = extension.chessboard\n        this.piecesListContainer = Utils.createDomElement(`<div><h3 id=\"hl_lists_${this.chessboard.id}\">${extension.t.pieces_lists}</h3><div class=\"list\"></div></div>`)\n        this.piecesList = this.piecesListContainer.querySelector(\".list\")\n        container.appendChild(this.piecesListContainer)\n        extension.registerExtensionPoint(EXTENSION_POINT.positionChanged, () => {\n            this.redraw()\n        })\n    }\n\n    redraw() {\n        const pieces = this.chessboard.state.position.getPieces()\n        let listW = \"\"\n        let listB = \"\"\n        for (const piece of pieces) {\n            if (piece.color === \"w\") {\n                listW += `<li class=\"list-inline-item\">${renderPieceTitle(this.extension.lang, piece.type)} ${piece.position}</li>`\n            } else {\n                listB += `<li class=\"list-inline-item\">${renderPieceTitle(this.extension.lang, piece.type)} ${piece.position}</li>`\n            }\n        }\n        this.piecesList.innerHTML = `\n        <h4 id=\"white_${this.chessboard.id}\">${this.extension.t.pieces} ${this.extension.tPieces.colors_long.w}</h4>\n        <ul aria-labelledby=\"white_${this.chessboard.id}\" class=\"list-inline\">${listW}</ul>\n        <h4 id=\"black_${this.chessboard.id}\">${this.extension.t.pieces} ${this.extension.tPieces.colors_long.b}</h4>\n        <ul aria-labelledby=\"black_${this.chessboard.id}\" class=\"list-inline\">${listB}</ul>`\n    }\n}\n", "import { Chess } from 'chess.js'\r\nimport { INPUT_EVENT_TYPE, COLOR, Chessboard, BORDER_TYPE } from \"cm-chessboard/src/Chessboard.js\"\r\nimport { MARKER_TYPE, Markers } from \"cm-chessboard/src/extensions/markers/Markers.js\"\r\nimport { PROMOTION_DIALOG_RESULT_TYPE, PromotionDialog } from \"cm-chessboard/src/extensions/promotion-dialog/PromotionDialog.js\"\r\nimport { Accessibility } from \"cm-chessboard/src/extensions/accessibility/Accessibility.js\"\r\n\r\nif (typeof window !== \"undefined\" && window !== null) {\r\n  if (!window.plugins.chess) {\r\n    window.plugins.chess = { emit, bind };\r\n    if (typeof window.chessListener !== \"undefined\"\r\n      || window.chessListener == null) {\r\n      console.log('**** Adding chess listener')\r\n      window.chessListener = chessListener\r\n      window.addEventListener(\"message\", chessListener)\r\n    }\r\n  }\r\n}\r\n\r\nfunction emit($item, item) {\r\n  // append css files to head\r\n  [\"chessboard\", \"markers\", \"promotion-dialog\"].forEach((name) => {\r\n    if (!([...document.styleSheets].filter((e) => e.ownerNode.hasAttribute('href'))\r\n      .filter((e) => e.href.endsWith(`/plugins/chess/${name}.css`)).length)) {\r\n      // console.log(`adding ${name} style`)\r\n      const link = document.createElement('link')\r\n      link.rel = 'stylesheet'\r\n      link.href = `/plugins/chess/${name}.css`\r\n      link.type = 'text/css'\r\n      document.getElementsByTagName('head')[0].appendChild(link)\r\n    } else {\r\n      // console.log(`already have ${name} style`)\r\n    }\r\n  })\r\n\r\n  return $item.append(message('loading board...'))\r\n}\r\n\r\nfunction message(text) {\r\n  return `\r\n    <div class=\"table\" data-item=\"table\" style=\"width:98%\">\r\n      <div style=\"width:80%; padding:8px; color:gray; background-color:#eee; margin:0 auto; text-align:center\">\r\n        <i>${text}</i>\r\n      </div>\r\n    </div>\r\n  `\r\n}\r\n\r\nasync function bind($item, item) {\r\n  try {\r\n    const chess = new Chess()\r\n    let pgn = await makepgn($item, cleanBeforeMakepgn(item))\r\n    const tableTime = Date.now()\r\n    $item.find('.table').html(`\r\n      <div id=\"board-${tableTime}\" class=\"board board-large\" style=\"width: 400px\"></div>\r\n      <p id=\"gameStatus\"></p>\r\n    `)\r\n    const board = new Chessboard(document.getElementById(`board-${tableTime}`), {\r\n      position: chess.fen(),\r\n      assetsUrl: \"/plugins/chess/assets/\",\r\n      style: { borderType: BORDER_TYPE.none, pieces: { file: \"pieces/staunty.svg\" }, animationDuration: 300 },\r\n      orientation: COLOR.white,\r\n      extensions: [\r\n        { class: Markers, props: { autoMarkers: MARKER_TYPE.square } },\r\n        { class: PromotionDialog },\r\n        { class: Accessibility, props: { visuallyHidden: true } }\r\n      ]\r\n    })\r\n    updateGameStatus()\r\n    board.enableMoveInput(inputHandler, COLOR.white)\r\n    function inputHandler(event) {\r\n      if (event.type === INPUT_EVENT_TYPE.moveInputStarted) {\r\n        // mark legal moves\r\n        const moves = chess.moves({ square: event.squareFrom, verbose: true })\r\n        event.chessboard.addLegalMovesMarkers(moves)\r\n        return moves.length > 0\r\n      } else if (event.type === INPUT_EVENT_TYPE.validateMoveInput) {\r\n        const move = { from: event.squareFrom, to: event.squareTo, promotion: event.promotion }\r\n        try {\r\n          const result = chess.move(move)\r\n          event.chessboard.state.moveInputProcess.then(() => { // wait for the move input process has finished\r\n            event.chessboard.setPosition(chess.fen(), true).then(() => { // update position, maybe castled and wait for animation has finished\r\n              makeEngineMove(event.chessboard)\r\n            })\r\n          })\r\n        } catch {\r\n          // promotion?\r\n          let possibleMoves = chess.moves({ square: event.squareFrom, verbose: true })\r\n          for (const possibleMove of possibleMoves) {\r\n            if (possibleMove.promotion && possibleMove.to === event.squareTo) {\r\n              event.chessboard.showPromotionDialog(event.squareTo, COLOR.white, (result) => {\r\n                if (result.type === PROMOTION_DIALOG_RESULT_TYPE.pieceSelected) {\r\n                  chess.move({ from: event.squareFrom, to: event.squareTo, promotion: result.piece.charAt(1) })\r\n                  event.chessboard.setPosition(chess.fen(), true)\r\n                  makeEngineMove(event.chessboard)\r\n                } else {\r\n                  // promotion canceled\r\n                  event.chessboard.enableMoveInput(inputHandler, COLOR.white)\r\n                  event.chessboard.setPosition(chess.fen(), true)\r\n                }\r\n              })\r\n              return true\r\n            }\r\n          }\r\n        }\r\n        return\r\n      } else if (event.type === INPUT_EVENT_TYPE.moveInputFinished) {\r\n        if (event.legalMove) {\r\n          event.chessboard.disableMoveInput()\r\n        }\r\n      } if (event.type !== INPUT_EVENT_TYPE.moveInputFinished) {\r\n        event.chessboard.removeLegalMovesMarkers()\r\n      }\r\n\r\n      if (event.type === INPUT_EVENT_TYPE.movingOverSquare) {\r\n        return // ignore this event\r\n      }\r\n    }\r\n    function makeEngineMove(chessboard) {\r\n      const possibleMoves = chess.moves({ verbose: true })\r\n      if (possibleMoves.length > 0) {\r\n        const randomIndex = Math.floor(Math.random() * possibleMoves.length)\r\n        const randomMove = possibleMoves[randomIndex]\r\n        setTimeout(() => { // smoother with 500ms delay\r\n          chess.move({ from: randomMove.from, to: randomMove.to })\r\n          chessboard.setPosition(chess.fen(), true)\r\n          // chessboard.enableMoveInput(inputHandler, COLOR.white)\r\n        }, 500)\r\n      }\r\n      updateGameStatus()\r\n    }\r\n\r\n    function updateGameStatus() {\r\n      let statusHTML = ''\r\n\r\n      if (chess.isCheckmate() && chess.turn() === 'w') {\r\n        statusHTML = 'Game over: white is in checkmate. Black wins!'\r\n      } else if (chess.isCheckmate() && chess.turn() === 'b') {\r\n        statusHTML = 'Game over: black is in checkmate. White wins!'\r\n      } else if (chess.isStalemate() && chess.turn() === 'w') {\r\n        statusHTML = 'Game is drawn. White is stalemated.'\r\n      } else if (chess.isStalemate() && chess.turn() === 'b') {\r\n        statusHTML = 'Game is drawn. Black is stalemated.'\r\n      } else if (chess.isThreefoldRepetition()) {\r\n        statusHTML = 'Game is drawn by threefold repetition rule.'\r\n      } else if (chess.isInsufficientMaterial()) {\r\n        statusHTML = 'Game is drawn by insufficient material.'\r\n      } else if (chess.isDraw()) {\r\n        statusHTML = 'Game is drawn by fifty-move rule.'\r\n      } else {\r\n        statusHTML = 'Game is ongoing.'\r\n      }\r\n\r\n      document.getElementById('gameStatus').innerHTML = statusHTML\r\n      if (chess.isGameOver()) console.log(chess.pgn());\r\n    }\r\n  } catch (err) {\r\n    console.log('makepgn', err)\r\n    $item.html(message(err.message))\r\n  }\r\n  $item.on('dblclick', () => { return wiki.textEditor($item, item) })\r\n\r\n  $item.on('click', event => {\r\n    // console.log(\"Clicked on item!\")\r\n\r\n\r\n    // const { target } = event\r\n\r\n    // const { action } = (target.closest(\"a\") || {}).dataset\r\n\r\n    // if (!action) {\r\n    //   return\r\n    // }\r\n    // event.stopPropagation()\r\n    // event.preventDefault()\r\n    // switch (action) {\r\n    //   case \"download\":\r\n    //     const slug = $item.parents('.page').attr('id')\r\n    //     download(`${slug}.svg`, item.svg)\r\n    //     break\r\n    //   case \"zoom\":\r\n    //     // wiki.dialog('Graphviz', item.svg)\r\n    //     const pageKey = $item.parents('.page').data('key')\r\n    //     const context = wiki.lineup.atKey(pageKey).getContext()\r\n    //     const chessDialog = window.open('/plugins/chess/dialog/#', event.shiftKey ? '_blank' : 'chess', 'popup,height=600,width=800')\r\n    //     if (chessDialog.location.pathname !== '/plugins/chess/dialog/') {\r\n    //       chessDialog.addEventListener('load', (event) => {\r\n    //         chessDialog.postMessage({ svg: item.svg, pageKey, context }, window.origin)\r\n    //       })\r\n    //     } else {\r\n    //       chessDialog.postMessage({ svg: item.svg, pageKey, context }, window.origin)\r\n    //     }\r\n    //     break\r\n    // }\r\n  })\r\n\r\n\r\n\r\n\r\n\r\n  function download(filename, text) {\r\n    var element = document.createElement('a');\r\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n    element.setAttribute('download', filename);\r\n    element.style.display = 'none';\r\n    document.body.appendChild(element);\r\n    element.click();\r\n    document.body.removeChild(element);\r\n  }\r\n};\r\n\r\nfunction cleanBeforeMakepgn(item) {\r\n  // for when item text gets more complicated than just pgn\r\n  return item\r\n}\r\n\r\nasync function makepgn($item, item) {\r\n  return item.text; // This is the raw item text, this function need to return valid pgn\r\n\r\n  function trouble(text, detail) {\r\n    // console.log(text,detail)\r\n    throw new Error(text + \"\\n\" + detail)\r\n  }\r\n\r\n}\r\n\r\nfunction chessListener(event) {\r\n  // only continue if event is from a chess popup.\r\n  // events from a popup window will have an opener\r\n  // ensure that the popup window is one of ours\r\n  if (!event.source.opener || event.source.location.pathname !== '/plugins/chess/dialog/') {\r\n    if (wiki.debug) { console.log('chessListener - not for us', { event }) }\r\n    return\r\n  }\r\n  if (wiki.debug) { console.log('chessListener - ours', { event }) }\r\n\r\n  const { data } = event\r\n  const { action, keepLineup = false, pageKey = null, title = null, context = null } = data;\r\n\r\n  let $page = null\r\n  if (pageKey != null) {\r\n    $page = keepLineup ? null : $('.page').filter((i, el) => $(el).data('key') == pageKey)\r\n  }\r\n\r\n  switch (action) {\r\n    case 'doInternalLink':\r\n      wiki.pageHandler.context = context\r\n      wiki.doInternalLink(title, $page)\r\n      break\r\n    default:\r\n      console.error({ where: 'chessListener', message: \"unknown action\", data })\r\n  }\r\n}\r\n\r\n// Example export\r\nconst expand = text => {\r\n  return text\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\\*(.+?)\\*/g, '<i>$1</i>')\r\n}\r\n\r\nexport const chess = typeof window == 'undefined' ? { expand } : undefined\r\n\r\n// TODO change to make it a playable Game\r\n// TODO if item text is empty, or not able to be parsed as png, just load a fresh game against random bot, randomize who goes first\r\n// TODO make backwards compatible with previous notation\r\n// TODO if there is parseable PGN, load it... otherwise try and make sense of it to parse"],
  "mappings": "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",
  "names": ["WHITE", "BLACK", "PAWN", "KNIGHT", "BISHOP", "ROOK", "QUEEN", "KING", "DEFAULT_POSITION", "Move", "chess", "internal", "color", "piece", "from", "to", "flags", "captured", "promotion", "fromAlgebraic", "algebraic", "toAlgebraic", "flag", "BITS", "FLAGS", "EMPTY", "BITS", "Ox88", "PAWN_OFFSETS", "PIECE_OFFSETS", "ATTACKS", "RAYS", "PIECE_MASKS", "SYMBOLS", "PROMOTIONS", "KNIGHT", "BISHOP", "ROOK", "QUEEN", "RANK_1", "RANK_2", "RANK_7", "RANK_8", "SIDES", "KING", "ROOKS", "SECOND_RANK", "TERMINATION_MARKERS", "rank", "square", "file", "isDigit", "c", "algebraic", "f", "r", "swapColor", "color", "WHITE", "BLACK", "validateFen", "fen", "tokens", "moveNumber", "halfMoves", "rows", "i", "sumFields", "previousWasNumber", "k", "kings", "regex", "char", "getDisambiguator", "move", "moves", "from", "to", "piece", "ambiguities", "sameRank", "sameFile", "len", "ambigFrom", "ambigTo", "ambigPiece", "addMove", "captured", "flags", "PAWN", "promotion", "inferPieceType", "san", "pieceType", "strippedSan", "trimFen", "Chess", "EMPTY", "DEFAULT_POSITION", "skipValidation", "preserveHeaders", "adjustments", "ok", "error", "position", "empty", "castling", "epSquare", "bigPawnSquare", "squares", "isLegal", "type", "sq", "currentPieceOnSquare", "whiteKingInPlace", "blackKingInPlace", "startSquare", "currentSquare", "attackers", "canCapture", "verbose", "difference", "index", "offset", "j", "blocked", "attackedBy", "pieces", "bishops", "numPieces", "squareColor", "sum", "Move", "legal", "forSquare", "forPiece", "us", "them", "firstSquare", "lastSquare", "singleSquare", "castlingFrom", "castlingTo", "legalMoves", "strict", "moveObj", "prettyMove", "old", "newline", "maxWidth", "result", "headerExists", "appendComment", "moveString", "comment", "delimiter", "reversedHistory", "prefix", "strip", "wrapComment", "width", "token", "currentWidth", "args", "key", "value", "pgn", "newlineChar", "mask", "str", "parsePgnHeader", "header", "headerObj", "headers", "headerRegexResults", "headerString", "toHex", "s", "fromHex", "encodeComment", "decodeComment", "ms", "_match", "bracket", "semicolon", "ravRegex", "halfMove", "output", "disambiguator", "cleanMove", "matches", "overlyDisambiguated", "symbol", "depth", "nodes", "row", "moveHistory", "trimmedFen", "currentComments", "copyComment", "rights", "side", "FEN", "Position", "_Position", "fen", "parts", "part", "row", "str", "numSpaces", "ret", "i", "c", "char", "piece", "spaceCounter", "color", "name", "pieceColor", "pieceType", "sortBy", "pieces", "sort", "a", "b", "type", "square", "squareFrom", "squareTo", "coordinates", "index", "file", "rank", "cloned", "ChessboardState", "Position", "name", "data", "extensionPoints", "dataCloned", "returnValue", "extensionPoint", "SVG_NAMESPACE", "Svg", "containerElement", "svg", "parent", "name", "attributes", "element", "attribute", "value", "EXTENSION_POINT", "Extension", "chessboard", "name", "callback", "args", "Utils", "_Utils", "element", "eventName", "selector", "handler", "eventListener", "event", "target", "source", "isObject", "obj", "key", "html", "template", "resolve", "reject", "promise", "_resolve", "_reject", "url", "ANIMATION_EVENT_TYPE", "PromiseQueue", "promise", "resolve", "reject", "entry", "value", "err", "CHANGE_TYPE", "PositionsAnimation", "_PositionsAnimation", "view", "fromPosition", "toPosition", "duration", "callback", "Utils", "EXTENSION_POINT", "fromSquares", "toSquares", "appearedList", "disappearedList", "changes", "i", "previousSquare", "newSquare", "appeared", "shortestDistance", "foundMoved", "disappeared", "moveDistance", "animatedElements", "change", "animatedItem", "Position", "time", "timeDiff", "Svg", "t", "progress", "transform", "index1", "index2", "file1", "rank1", "file2", "rank2", "PositionAnimationsQueue", "chessboard", "positionFrom", "positionTo", "animated", "position", "color", "emptyPosition", "FEN", "MOVE_INPUT_STATE", "MOVE_CANCELED_REASON", "DRAG_THRESHOLD", "VisualMoveInput", "view", "square", "result", "Utils", "fromSquare", "toSquare", "reason", "newState", "params", "prevState", "Svg", "hiddenPieces", "i", "pieceName", "spriteUrl", "piece", "scaling", "transformScale", "x", "y", "color", "point", "pieceColor", "startPieceName", "startPieceColor", "pageX", "pageY", "clientX", "clientY", "target", "moveStartSquare", "COLOR", "INPUT_EVENT_TYPE", "POINTER_EVENTS", "BORDER_TYPE", "ChessboardView", "chessboard", "VisualMoveInput", "Svg", "wrapperId", "url", "wrapper", "xhr", "cssClass", "piecesTileSize", "EXTENSION_POINT", "innerPos", "i", "index", "fieldClass", "point", "Position", "squareRect", "inline", "file", "x", "y", "textElement", "rank", "squares", "childNodes", "isDragging", "pieceName", "square", "childNode", "parentGroup", "pieceGroup", "transform", "spriteUrl", "pieceUse", "transformScale", "hidden", "transformTranslate", "visible", "piece", "eventHandler", "color", "data", "squareFrom", "squareTo", "reason", "legalMove", "Utils", "PIECE", "PIECES_FILE_TYPE", "Chessboard", "context", "props", "FEN", "COLOR", "BORDER_TYPE", "PIECES_FILE_TYPE", "Utils", "ChessboardState", "ChessboardView", "PositionAnimationsQueue", "extensionData", "Position", "EXTENSION_POINT", "square", "piece", "animated", "positionFrom", "squareFrom", "squareTo", "fen", "positionTo", "color", "position", "eventHandler", "eventType", "POINTER_EVENTS", "e", "extensionClass", "extension", "MARKER_TYPE", "Markers", "Extension", "chessboard", "props", "EXTENSION_POINT", "Svg", "event", "INPUT_EVENT_TYPE", "marker", "moves", "move", "markerGroup", "point", "transform", "spriteUrl", "markerUse", "transformScale", "type", "square", "Marker", "markersFound", "Utils", "DISPLAY_STATE", "PROMOTION_DIALOG_RESULT_TYPE", "PromotionDialog", "Extension", "chessboard", "EXTENSION_POINT", "Svg", "square", "color", "callback", "piece", "point", "squareWidth", "squareHeight", "squareCenterPoint", "turned", "rank", "COLOR", "offsetY", "offsetX", "dialogParams", "PIECE", "event", "displayState", "Utils", "piecesTranslations", "renderPieceTitle", "lang", "name", "color", "title", "translations", "Accessibility", "Extension", "chessboard", "props", "piecesTranslations", "container", "MovePieceForm", "BoardAsTable", "PiecesAsList", "BrailleNotationInAlt", "extension", "EXTENSION_POINT", "pieces", "listW", "listB", "piece", "pieceName", "altText", "Utils", "evt", "INPUT_EVENT_TYPE", "squares", "ranks", "files", "COLOR", "html", "rank", "x", "y", "pieceCode", "color", "name", "renderPieceTitle", "emit", "bind", "chessListener", "$item", "item", "name", "e", "link", "message", "text", "inputHandler", "event", "INPUT_EVENT_TYPE", "moves", "chess", "move", "result", "makeEngineMove", "possibleMoves", "possibleMove", "COLOR", "PROMOTION_DIALOG_RESULT_TYPE", "chessboard", "randomIndex", "randomMove", "updateGameStatus", "statusHTML", "Chess", "pgn", "makepgn", "tableTime", "board", "Chessboard", "BORDER_TYPE", "Markers", "MARKER_TYPE", "PromotionDialog", "Accessibility", "err", "download", "filename", "element", "makepgn", "$item", "item", "trouble", "text", "detail", "chessListener", "event", "data", "action", "keepLineup", "pageKey", "title", "context", "$page", "i", "el", "expand", "chess"]
}
